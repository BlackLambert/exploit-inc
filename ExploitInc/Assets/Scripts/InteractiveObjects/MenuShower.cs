using System;
using System.Collections;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class MenuShower : MonoBehaviour
	{
		[SerializeField]
		private float _showTime = 0.33f;
		[SerializeField]
		private CanvasGroup _group = null;
		[SerializeField]
		private float _hideTime = 0.5f;
		[SerializeField]
		private string _animatorParameter = "Shown";
		[SerializeField]
		private Animator _animator = null;

		private bool _shown = false;
		private Coroutine _activeShowRoutine = null;
		private Coroutine _activeHideRoutine = null;

		public bool Hiding => _activeHideRoutine != null;
		public bool Showing => _activeShowRoutine != null;

		public event Action OnHidden;
		public event Action OnShown;


		protected virtual void Awake()
		{
			_group.interactable = false;
			_group.alpha = 0;
			_group.blocksRaycasts = false;
		}


		public void Show()
		{
			if (_activeHideRoutine != null ||
				_shown || _activeShowRoutine != null)
				return;

			_activeShowRoutine = StartCoroutine(show());
		}

		private IEnumerator show()
		{
			_animator.SetBool(_animatorParameter, true);
			_group.interactable = true;
			_group.alpha = 1;
			_group.blocksRaycasts = true;
			_shown = true;
			yield return new WaitForSeconds(_showTime);
			_activeShowRoutine = null;
			OnShown?.Invoke();
		}

		public void Hide()
		{
			if (_activeHideRoutine != null || !_shown)
			{
				OnHidden?.Invoke();
				return;
			}

			if (_activeShowRoutine != null)
				StopCoroutine(_activeShowRoutine);

			_activeHideRoutine = StartCoroutine(hide());
		}

		private IEnumerator hide()
		{
			_shown = false;
			_group.interactable = false;
			_animator.SetBool(_animatorParameter, false);
			yield return new WaitForSeconds(_hideTime);
			_group.alpha = 0;
			_group.blocksRaycasts = false;
			_activeHideRoutine = null;
			OnHidden?.Invoke();
		}

		public void HideAndShow()
		{
			if (!_shown)
			{
				OnHidden?.Invoke();
				Show();
				return;
			}

			_activeShowRoutine = StartCoroutine(hideAndShow());
		}

		private IEnumerator hideAndShow()
		{
			yield return hide();
			yield return show();
		}
	}
}