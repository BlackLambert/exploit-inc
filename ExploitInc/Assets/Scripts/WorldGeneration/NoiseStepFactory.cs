
using System;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
    public class NoiseStepFactory 
    {
        private DiContainer _diContainer;
        private Seed _seed;

        public NoiseStepFactory(DiContainer diContainer, Seed seed)
		{
            _diContainer = diContainer;
            _seed = seed;
        }

        public NoiseStep Create(NoiseStepSettings settings)
		{
            Noise noise = createNoise(settings.Type);
            noise.SetOffset(createOffset());
            NoiseFilter noiseFilter = createNoiseFilter(settings.FilterType, noise);
            return new NoiseStep(calcRoughness(settings), calcStrength(settings), noiseFilter);
		}

        private float calcRoughness(NoiseStepSettings settings)
		{
            return settings.MinRoughness + settings.RoughnessRange * (float)_seed.Rand.NextDouble();
		}

        private float calcStrength(NoiseStepSettings settings)
        {
            return settings.MinStrength + settings.StrengthRange * (float)_seed.Rand.NextDouble();
        }

        private Noise createNoise(NoiseType noiseType)
		{
            switch(noiseType)
			{
                case NoiseType.Perlin:
                    return _diContainer.Resolve<PerlinNoise>();
                case NoiseType.LagueNoise:
                    return _diContainer.Resolve<LagueNoise>();
                default:
                    throw new NotImplementedException();
			}
		}

        private NoiseFilter createNoiseFilter(NoiseFilterType type, Noise noise)
        {
            switch (type)
            {
                case NoiseFilterType.Simple:
                    return new SimpleNoiseFilter(noise);
                case NoiseFilterType.Ridgid:
                    return new RidgidNoiseFilter(noise);
                default:
                    throw new NotImplementedException();
            }
        }

        private Vector3 createOffset()
		{
            float x = (float)_seed.Rand.NextDouble() * 1000 - 500;
            float y = (float)_seed.Rand.NextDouble() * 1000 - 500;
            float z = (float)_seed.Rand.NextDouble() * 1000 - 500;
            return new Vector3(x, y, z);
        }
    }
}