using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
    public class PlanetGenerator : MonoBehaviour
    {
        private Seed _seed;
        private PrefabFactory _prefabFactory;

        [SerializeField]
        [Range(10,30)]
        private float _minRadius = 1;
        [SerializeField]
        [Range(0, 30)]
        private float _radiusRange = 10;
        [SerializeField]
        [Range(0.25f, 2f)]
        private float _lowestPointPercent = 0.95f;
        [SerializeField]
        [Range(0, 1f)]
        private float _lowestPointPercentRange = 0.1f;
        [SerializeField]
        [Range(0.5f, 10f)]
        private float _resolutionPerRadius = 2f;
        [SerializeField]
        private PlanetTerrain _planetTerrainPrefab = null;
        [SerializeField]
        private NoiseLayersSettings _noiseLayers = null;
        [SerializeField]
        private List<PlanetColorSettings> _colorSettings = new List<PlanetColorSettings>();



        [Inject]
        private void Inject(Seed seed, PrefabFactory prefabFactory)
		{
            _seed = seed;
            _prefabFactory = prefabFactory;
        }

        protected virtual void Start()
		{
            generatePlanet();
        }

        private void generatePlanet()
		{
            float radius = (float)(_minRadius + _seed.Rand.NextDouble() * _radiusRange);
            float lowestPointPercent = (float)(_lowestPointPercent + _seed.Rand.NextDouble() * _lowestPointPercentRange);
            int colorIndex = _seed.Rand.Next(0, _colorSettings.Count);
            Debug.Log(colorIndex);
            PlanetColorSettings colorSettings = _colorSettings[colorIndex];
            List<NoiseStepSettings> steps = new List<NoiseStepSettings>();
            foreach (NoiseLayerSettings settings in _noiseLayers.NoiseStepsSettings)
                steps.AddRange(settings.Steps);
            NoiseArguments noiseArguments = new NoiseArguments(_noiseLayers);
            PrefabFactory.Parameter parameter = new PrefabFactory.Parameter(new PlanetTerrainArgs(radius, _resolutionPerRadius, lowestPointPercent, colorSettings, noiseArguments));
            _prefabFactory.Create(_planetTerrainPrefab, new PrefabFactory.Parameter[] { parameter });
        }
    }
}