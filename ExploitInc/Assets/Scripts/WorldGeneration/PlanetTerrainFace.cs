using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Assertions;

namespace SBaier.ExploitInc
{
    public class PlanetTerrainFace 
    {
        private Mesh _mesh;
        private int _resolution;
        private Vector3 _localUp;
        private List<NoiseLayer> _noiseLayers;

        private Vector3 _axisU;
        private Vector3 _axisV;
        private float _radius;

        public PlanetTerrainFace(MeshArguments meshArgs)
		{
            _mesh = meshArgs.Mesh;
            _resolution = meshArgs.Resolution;
            _localUp = meshArgs.LocalUp.normalized;
            _radius = meshArgs.LocalUp.magnitude;
            _noiseLayers = meshArgs.NoiseLayers;

            _axisU = new Vector3(_localUp.y, _localUp.z, _localUp.x).normalized;
            _axisV = Vector3.Cross(_localUp, _axisU).normalized;
        }

        public void ConstructMesh()
		{
            Vector3[] verticies = new Vector3[_resolution * _resolution];
            // The triangles of the mesh defined by their vertices
            int[] triangles = new int[(_resolution - 1) * (_resolution - 1) * 2 * 3];
            int triangleIndex = 0;

            // Column
			for (int y = 0; y < _resolution; y++)
			{
                // Row
				for (int x = 0; x < _resolution; x++)
				{
                    int i = x + y * _resolution;
                    verticies[i] = createVertice(x, y);
                    if (x < _resolution - 1 && y < _resolution - 1)
                        createTriangles(ref triangles, ref triangleIndex, i);
                }
			}
            updateMesh(verticies, triangles);
        }

        public void UpdateUVs(Vector2[] uv)
		{
            _mesh.uv = uv;
        }

        private Vector3 createVertice(int x, int y)
		{
            Vector2 percent = new Vector2(x, y) / (_resolution - 1);
            Vector3 pointOnFace = _localUp + (percent.x - 0.5f) * 2 * _axisU + (percent.y - 0.5f) * 2 * _axisV;
            pointOnFace = pointOnFace.normalized;
            pointOnFace = applyNoise(pointOnFace);
            float magnitude = pointOnFace.magnitude;
            //magnitude = Mathf.Max(1f, pointOnFace.magnitude);
            pointOnFace = pointOnFace.normalized * magnitude;
            pointOnFace *= _radius;
            return pointOnFace;
        }

        private void createTriangles(ref int[] triangles, ref int triangleIndex, int index)
		{
            // First triangle
            triangles[triangleIndex] = index;
            triangles[triangleIndex + 1] = index + _resolution + 1;
            triangles[triangleIndex + 2] = index + _resolution;
            // Second triangle
            triangles[triangleIndex + 3] = index;
            triangles[triangleIndex + 4] = index + 1;
            triangles[triangleIndex + 5] = index + _resolution + 1;
            triangleIndex += 6;
        }

        private Vector3 applyNoise(Vector3 point)
        {
            float elevation = 1;

            foreach (NoiseLayer layer in _noiseLayers)
			{
                float layerElevation = layer.Evaluate(point);
                NoiseLayer maskLayer = null;
                if (!string.IsNullOrEmpty(layer.MaskLayerID))
                    maskLayer = getLayerByID(layer.MaskLayerID);

                float mask = maskLayer == null ? 1 : maskLayer.Evaluate(point) / maskLayer.MaxValue;
                Assert.IsTrue(mask <= 1);
                elevation += layerElevation * Mathf.Pow(mask,1.5f);
                //if (layer.LayerID == "Mountains")
                //    Debug.Log($"Elevation: {elevation} | mask: {mask} | layerElevation {layerElevation}");
            }
            return point * elevation;
        }

        private NoiseLayer getLayerByID(string iD)
		{
            NoiseLayer result = _noiseLayers.FirstOrDefault(l => l.LayerID == iD);
            if (result != null)
                return result;
            throw new ArgumentException();
		}

        private void updateMesh(Vector3[] verticies, int[] triangles)
		{
            _mesh.Clear();
            _mesh.vertices = verticies;
            _mesh.triangles = triangles;
            _mesh.RecalculateNormals();
        }
    }

}