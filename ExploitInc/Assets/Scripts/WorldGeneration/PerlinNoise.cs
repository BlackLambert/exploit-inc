using UnityEngine;

namespace SBaier.ExploitInc
{
	public class PerlinNoise : Noise
	{
		private Vector3 _offset;


		public PerlinNoise()
		{
			
		}

		private float getX(float inputX)
		{
			return inputX + _offset.x;
		}

		private float getY(float inputY)
		{
			return inputY + _offset.y;
		}

		private float getZ(float inputZ)
		{
			return inputZ + _offset.z;
		}

		public override float Evaluate(Vector3 point, float factor)
		{
			point *= factor;
			 float xy = Mathf.PerlinNoise(getX(point.x), getY(point.y));
			float yz = Mathf.PerlinNoise(getY(point.y), getZ(point.z));
			float xz = Mathf.PerlinNoise(getX(point.x), getZ(point.z));

			float yx = Mathf.PerlinNoise(getY(point.y), getX(point.x));
			float zy = Mathf.PerlinNoise(getZ(point.z), getY(point.y));
			float zx = Mathf.PerlinNoise(getZ(point.z), getX(point.x));

			return (xy + yz + xz + yx + zy + zx) / 6;
		}

		public override float Evaluate(Vector2 point, float factor)
		{
			point *= factor;
			return Mathf.PerlinNoise(getX(point.x),getY( point.y));
		}

		public override void SetOffset(Vector3 offset)
		{
			_offset = offset;
		}
	}
}