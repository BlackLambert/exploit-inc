using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
    public class PlanetTerrain : MonoBehaviour
    {
        [SerializeField]
        private string _childMeshName = "Mesh";
        [SerializeField]
        private bool _disableWater = false;

        private int _meshResolution;
        private float _radius;
        private float _lowestPointPercent;
        private NoiseArguments _noiseArguments;
        private NoiseStepFactory _noiseStepFactory;
        private PlanetColorSettings _colorSettings;
        private GradientToTexture _gradientToTexture;

        private PlanetTerrainFace[] _terrainFaces;
        private readonly Vector3[] _directions = new Vector3[] { Vector3.up,
                Vector3.down,
                Vector3.forward,
                Vector3.back,
                Vector3.left,
                Vector3.right};


        [Inject]
        private void Construct(PlanetTerrainArgs args, 
            NoiseStepFactory noiseStepFactory,
            GradientToTexture gradientToTexture)
		{
            _radius = args.Radius;
            _meshResolution = (int) (_radius * args.ResolutionPerRadius);
            _colorSettings = args.ColorSettings;
            _noiseArguments = args.NoiseArguments;
            _noiseStepFactory = noiseStepFactory;
            _lowestPointPercent = args.LowestPointPercent;
            _gradientToTexture = gradientToTexture;

            _terrainFaces = _disableWater ? new PlanetTerrainFace[6] : new PlanetTerrainFace[12];
        }

		protected virtual void Start()
        {
            initialize();
            generateMesh();
        }

        private void initialize()
		{
            List<NoiseLayer> layers = createLayers();

            for (int i = 0; i < 6; i++)
			{
                float maxHeight = (layers.Sum(l => l.MaxValue) + _radius)*1.1f;
                MeshFilter meshFilter = createPlanetMeshObject(_radius, maxHeight);
                MeshArguments meshArguments = new MeshArguments(meshFilter.sharedMesh, _meshResolution, _directions[i]*_radius * _lowestPointPercent, layers);
                _terrainFaces[i] = new PlanetTerrainFace(meshArguments);
                if (_disableWater)
                    continue;
                MeshFilter meshFilterSea = createSeaMeshObject();
                MeshArguments seaMeshArguments = new MeshArguments(meshFilterSea.sharedMesh, _meshResolution, _directions[i] *_radius, new List<NoiseLayer>());
                _terrainFaces[i+6] = new PlanetTerrainFace(seaMeshArguments);
            }
        }

        private List<NoiseLayer> createLayers()
		{
            List<NoiseLayer> layers = new List<NoiseLayer>();
            foreach (NoiseLayerSettings layerSettings in _noiseArguments.Layers.NoiseStepsSettings)
            {
                string text = "Noise: ";
                List<NoiseStep> steps = new List<NoiseStep>();
                for (int i = 0; i < layerSettings.Steps.Count; i++)
                {
                    steps.Add(_noiseStepFactory.Create(layerSettings.Steps[i]));
                    text += $"{steps[i].ToString()} |";
                }
                //Debug.Log(text);
                layers.Add(new NoiseLayer(steps, layerSettings.LayerID, layerSettings.MaskLayerID, layerSettings.MinValue));
            }
            return layers;
        }

        private void generateMesh()
        {
            foreach (PlanetTerrainFace face in _terrainFaces)
            {
                face.ConstructMesh();
            }
        }

        private MeshFilter createPlanetMeshObject(float minHeight, float maxHeight)
		{
            return createMesh(createMeshObject(), createPlanetMaterial(minHeight, maxHeight));
        }

        private MeshFilter createSeaMeshObject()
		{
            return createMesh(createMeshObject(), createSeaMaterial());
        }

        private GameObject createMeshObject()
		{
            GameObject meshObject = new GameObject(_childMeshName);
            meshObject.transform.SetParent(transform, false);
            return meshObject;
        }

        private MeshFilter createMesh(GameObject meshObject, Material mat)
		{
            meshObject.AddComponent<MeshRenderer>().sharedMaterial = mat;
            MeshFilter filter = meshObject.AddComponent<MeshFilter>();
            filter.sharedMesh = new Mesh();
            return filter;
        }

        private Material createPlanetMaterial(float minHeight, float maxHeight)
		{
            Material material = new Material(_colorSettings.SurfaceMaterial);
            material.SetFloat("_MinHeight", minHeight);
            material.SetFloat("_MaxHeight", maxHeight);
            material.SetTexture("_SteepColorTexture", _gradientToTexture.Convert(_colorSettings.CalculateSteepnessGradient()));
            List<GradientToTexture.GradientTexture2DArg> args = new List<GradientToTexture.GradientTexture2DArg>();
			foreach (BiomSettings biom in _colorSettings.Biomes)
                args.Add(new GradientToTexture.GradientTexture2DArg(biom.Offset, biom.Size, biom.SurfaceColor));
            material.SetTexture("_HeightColorTexture", _gradientToTexture.Convert(args));
            return material;
        }

        private Material createSeaMaterial()
		{
            Material material = new Material(_colorSettings.WaterMaterial);
            material.SetTexture("_SurfaceColorTexture", _gradientToTexture.Convert(_colorSettings.CalculateWaterGradient()));
            return material;
        }
    }
}