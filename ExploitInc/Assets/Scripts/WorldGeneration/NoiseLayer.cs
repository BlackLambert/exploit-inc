using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SBaier.ExploitInc
{
    public class NoiseLayer 
    {
        public List<NoiseStep> NoiseSteps { get; }
        public string LayerID { get; } = string.Empty;
        public string MaskLayerID { get; } = string.Empty;
        public float MinValue { get; } = 0;

        public NoiseLayer(List<NoiseStep> noiseSteps, 
            string layerID,
            string maskLayerID,
            float minValue)
		{
            NoiseSteps = noiseSteps;
            LayerID = layerID;
            MaskLayerID = maskLayerID;
            MinValue = minValue;
        }

        public float Evaluate(Vector3 point)
		{
            float result = 0;
            foreach (NoiseStep step in NoiseSteps)
            {
                result += step.Filter.Evaluate(point, Mathf.Max(0, step.Strength), step.Roughness);
            }
            return Mathf.Max(0, result- MinValue);
        }

        public float MaxValue
		{
			get
			{
                return NoiseSteps.Sum(s => Mathf.Max(0, s.Strength)) - MinValue;
			}
		}
    }
}