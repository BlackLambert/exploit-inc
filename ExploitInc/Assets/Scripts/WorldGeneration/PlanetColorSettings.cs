using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SBaier.ExploitInc
{
    [CreateAssetMenu(fileName = "PlanetColorSettings", menuName = "ScriptableObjects/PlanetColorSettings", order = 1)]
    public class PlanetColorSettings : ScriptableObject
    {
        [SerializeField]
        private List<BiomSettings> _biomes = new List<BiomSettings>();
        public List<BiomSettings> Biomes { get { return _biomes; } }

       
        [SerializeField]
        private Material _surfaceMaterial = null;
        [SerializeField]
        private Material _waterMaterial = null;

        public Material SurfaceMaterial { get { return _surfaceMaterial; } }
        public Material WaterMaterial { get { return _waterMaterial; } }


        public Gradient CalculateSteepnessGradient()
		{
            return createGradient(_biomes.Select(b => b.SteepColor).ToArray());
        }

        public Gradient CalculateWaterGradient()
        {
            return createGradient(_biomes.Select(b => b.WaterColor).ToArray());
        }

        private Gradient createGradient(Color[] colors)
		{
            Gradient result = new Gradient();
            result.mode = GradientMode.Blend;
            float sum = _biomes.Sum(b => b.Size);
            float currentSize = 0;
            List<GradientColorKey> keys = new List<GradientColorKey>();


            for (int i = 0; i < _biomes.Count; i++)
            {
                currentSize += _biomes[i].Size;
                float time = currentSize / sum;
                keys.Add(new GradientColorKey(colors[i], time));
                if (i == _biomes.Count - 1)
                    continue;
                else
                {
                    float offset = _biomes[i].Offset < _biomes[i + 1].Size ? _biomes[i].Offset : _biomes[i + 1].Size - 0.01f;
                    offset = offset <= 0 ? 0.01f : offset;
                    time = (currentSize + offset) / sum;
                    keys.Add(new GradientColorKey(colors[i + 1], time));
                }
            }

            result.colorKeys = keys.ToArray();
            return result;
        }


        
    }
}