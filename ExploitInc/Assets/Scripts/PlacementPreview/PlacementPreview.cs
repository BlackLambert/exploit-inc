using System.Collections;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class PlacementPreview : MonoBehaviour
	{
		[SerializeField]
		private CanvasGroup _group = null;
		[SerializeField]
		private Movable _movable = null;
		[SerializeField]
		private VerticalMover _verticalMover = null;
		[SerializeField]
		private Transform _base = null;
		[SerializeField]
		private Transform _center = null;
		[SerializeField]
		private PinToPosition _pinToPosition = null;
		[SerializeField]
		private MenuShower _menuShower = null;
		private Placeable _placeable;
		private PlacementPreviewObject _previewObject;

		private Vector3 _position = Vector3.zero;
		public Vector3 Position => _position;

		protected virtual void Awake()
		{
			_position = _base.position;
		}

		[Inject]
		private void Construct(Placeable placeable,
			PlacementPreviewObject previewObject)
		{
			_placeable = placeable;
			_previewObject = previewObject;
		}

		protected virtual void Start()
		{
			_placeable.OnBlockedChanged += onBlockedStateChanged;
			checkBlocked();
		}

		protected virtual void OnDestroy()
		{
			_placeable.OnBlockedChanged -= onBlockedStateChanged;
			_menuShower.OnHidden -= destroyOnHidden;
			_menuShower.OnHidden -= reshowOnHidden;
		}

		private void onBlockedStateChanged()
		{
			checkBlocked();
		}

		private void checkBlocked()
		{
			_group.interactable = !_placeable.Blocked;
		}

		public void SetPosition(Vector3 newPosition)
		{
			_movable.MoveTo(newPosition);
			_pinToPosition.TargetPos = newPosition;
			_verticalMover.MoveTo((newPosition - _center.position).magnitude);
		}

		public void Show()
		{
			_menuShower.Show();
			_previewObject.Show();
		}

		public void HideAndShowAt(Vector3 newPosition)
		{
			_position = newPosition;
			_menuShower.OnHidden += reshowOnHidden;
			_previewObject.Hide();
			_menuShower.Hide();
		}

		public void Hide()
		{
			StartCoroutine(doHide());
			_previewObject.Hide();
		}

		private IEnumerator doHide()
		{
			yield return 0;
			_menuShower.Hide();
			_menuShower.OnHidden += destroyOnHidden;
		}

		private void destroyOnHidden()
		{
			_menuShower.OnHidden -= destroyOnHidden;
			Destroy(_base.gameObject);
		}

		private void reshowOnHidden()
		{
			_menuShower.OnHidden -= reshowOnHidden;
			StartCoroutine(doRepositionOnHidden());
		}

		private IEnumerator doRepositionOnHidden()
		{
			yield return 0;
			SetPosition(_position);
			yield return 0;
			_menuShower.Show();
			_previewObject.Show();
		}
	}
}