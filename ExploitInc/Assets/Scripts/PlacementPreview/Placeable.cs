using System;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{

	public class Placeable : MonoBehaviour
	{
		public bool IsPlaceable => _placeErrors.Count == 0;
		public event Action OnIsPlaceableChanged;

		public List<string> _placeErrors = new List<string>();
		public event Action OnPlacementErrorsChanged;
		public string PlacementErrors 
		{ 
			get
			{
				string result = "";
				foreach(string error in _placeErrors)
				{
					result += error;
					if (_placeErrors.IndexOf(error) + 1 != _placeErrors.Count)
						result += "<br>";
				}
				return result;
			} 
		}

		public void AddError(string error)
		{
			if (_placeErrors.Contains(error))
				throw new InvalidOperationException();
			bool former = IsPlaceable;
			_placeErrors.Add(error);
			OnPlacementErrorsChanged?.Invoke();
			if (IsPlaceable != former)
				OnIsPlaceableChanged?.Invoke();
		}

		public void RemoveError(string error)
		{
			if (!_placeErrors.Contains(error))
				throw new InvalidOperationException($"Unable to remove {error}. It has not been added before.");
			bool former = IsPlaceable;
			_placeErrors.Remove(error);
			OnPlacementErrorsChanged?.Invoke();
			if (IsPlaceable != former)
				OnIsPlaceableChanged?.Invoke();
		}
	}
}