using System;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class Placeable : MonoBehaviour
	{
		private List<Blockable> _blockingObjects = new List<Blockable>();
		public bool Blocked => _blockingObjects.Count > 0;

		[SerializeField]
		private Blockable _objectToPlace = null;

		public event Action OnBlockedChanged;
		

		protected virtual void OnDestroy()
		{
			foreach (Blockable blockable in _blockingObjects)
				blockable.Unblock();
		}

		protected virtual void OnTriggerEnter(Collider other)
		{
			Blockable blockable = other.GetComponentInChildren<Blockable>();
			if (blockable == null || blockable == _objectToPlace || _blockingObjects.Contains(blockable))
				return;
			bool former = Blocked;
			blockable.Block();
			_blockingObjects.Add(blockable);
			checkBlocked(former);
		}

		protected virtual void OnTriggerExit(Collider other)
		{
			Blockable blockable = other.GetComponentInChildren<Blockable>();
			if (blockable == null)
				return;
			bool former = Blocked;
			blockable.Unblock();
			_blockingObjects.Remove(blockable);
			checkBlocked(former);
		}


		private void checkBlocked(bool formerState)
		{
			if (formerState == Blocked)
				return;
			_objectToPlace.Block(Blocked);
			OnBlockedChanged?.Invoke();
		}
	}
}