
using Zenject;

namespace SBaier.ExploitInc
{
	public class BuyDroneInteractionButton : InteractionMenuButton
	{
		private DroneHost _host;
		private DroneFactory _factory;
		private DroneConfig _droneConfig;
		private MissionData _missionData;

		[Inject]
		private void Construct(DroneFactory factory,
			DroneHost host,
			DroneConfig droneConfig,
			MissionData missionData)
		{
			_factory = factory;
			_host = host;
			_droneConfig = droneConfig;
			_missionData = missionData;
		}

		protected override void doOnClickActions()
		{
			buyDrone();
		}

		protected override void OnEnable()
		{
			base.OnEnable();
			_missionData.OnCurrentMoneyChanged += checkButtonActive;
			_host.OnActiveDroneAdded += onDronesChanged;
			_host.OnActiveDroneRemoved += onDronesChanged;
			checkButtonActive();
		}

		protected override void OnDisable()
		{
			base.OnDisable();
			_missionData.OnCurrentMoneyChanged -= checkButtonActive;
			_host.OnActiveDroneAdded -= onDronesChanged;
			_host.OnActiveDroneRemoved -= onDronesChanged;
		}

		private void checkButtonActive()
		{
			_button.interactable = _missionData.CurrentMoney >= _droneConfig.GetBuyCostsOf(_host.ActiveCount);
		}

		private void buyDrone()
		{
			_missionData.RequestMoney(_droneConfig.GetBuyCostsOf(_host.ActiveCount));
			Drone result = _factory.Create(_host.SpawnPoint.position);
			_host.Add(result);
		}

		private void onDronesChanged(Drone obj)
		{
			checkButtonActive();
		}
	}
}