using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class DroneCommandsFactory 
	{
		public Command Create(DroneCommandParameter parameter)
		{
			if (parameter is AddToHostDroneCommandParameter)
				return createMoveToHostCommand(parameter as AddToHostDroneCommandParameter);
			if (parameter is TransportWareCommandParameter)
				return createTransportWareCommand(parameter as TransportWareCommandParameter);
			if (parameter is ExploitResourceDroneCommandParameter)
				return createExploitResourceDroneCommand(parameter as ExploitResourceDroneCommandParameter);
			if (parameter is RefineWareDroneCommandParameter)
				return createRefineWareCommand(parameter as RefineWareDroneCommandParameter);
			throw new NotImplementedException();
		}

		private Command createExploitResourceDroneCommand(ExploitResourceDroneCommandParameter parameter)
		{
			ReserveResourceContainerCommand reserveCommand = new ReserveResourceContainerCommand(parameter.ResourceContainer);
			MoveCommand moveToResourceContainerCommand = new MoveCommand(parameter.ResourceContainer.ExploitPoint.position);
			ExploitResourceCommand exploitCommand = new ExploitResourceCommand(parameter.ResourceContainer, parameter.Building);
			PromiseDeliverableCommand promiseWareCommand = new PromiseDeliverableCommand(parameter.DeliveryContainer);
			MoveCommand moveToDeliverableContainerCommand = new MoveCommand(parameter.DeliveryContainer.Point.position);
			PlaceDeliverableCommand placeDeliverableCommand = new PlaceDeliverableCommand(parameter.DeliveryContainer);
			ReturnToHostCommand returnToHostCommand = new ReturnToHostCommand(parameter.Building.DroneHost);
			MoveCommand moveToHostCommand = new MoveCommand(parameter.Building.DroneHost.SpawnPoint.position);
			List<Command> commands = new List<Command>() { reserveCommand, moveToResourceContainerCommand, exploitCommand,
				promiseWareCommand, moveToDeliverableContainerCommand, placeDeliverableCommand, returnToHostCommand, moveToHostCommand};
			return new CommandSequence(commands);
		}

		private Command createTransportWareCommand(TransportWareCommandParameter parameter)
		{
			MoveCommand moveToOriginCommand = new MoveCommand(parameter.Origin.Point.position);
			TakeDeliverableCommand takeOriginCommand = new TakeDeliverableCommand(parameter.Origin, parameter.Deliverable);
			MoveCommand moveToDestinationCommand = new MoveCommand(parameter.Destination.Point.position);
			PlaceDeliverableCommand placeDeliverableCommand = new PlaceDeliverableCommand(parameter.Destination);
			MoveCommand moveToHostCommand = new MoveCommand(parameter.Host.SpawnPoint.position);
			ReturnToHostCommand returnToHostCommand = new ReturnToHostCommand(parameter.Host);
			List<Command> commands = new List<Command>() { moveToOriginCommand, takeOriginCommand,
				moveToDestinationCommand, placeDeliverableCommand, returnToHostCommand, moveToHostCommand};
			return new CommandSequence(commands);
		}

		private Command createMoveToHostCommand(AddToHostDroneCommandParameter parameter)
		{
			MoveCommand moveToHostCommand = new MoveCommand(parameter.Host.SpawnPoint.position);
			AddToHostCommand addToHostCommand = new AddToHostCommand(parameter.Host);
			List<Command> commands = new List<Command>() { addToHostCommand, moveToHostCommand};
			return new CommandSequence(commands);
		}

		private Command createRefineWareCommand(RefineWareDroneCommandParameter parameter)
		{
			MoveCommand moveToRefinementPointCommand = new MoveCommand(parameter.Building.RefinementPoint.position);
			RefineWareCommand refineWareCommand = new RefineWareCommand(parameter.Building, parameter.InputWaresCopy);
			MoveCommand moveToHostCommand = new MoveCommand(parameter.Building.DroneHost.SpawnPoint.position);
			ReturnToHostCommand returnToHost = new ReturnToHostCommand(parameter.Building.DroneHost);
			List<Command> commands = new List<Command>() { moveToRefinementPointCommand, refineWareCommand, moveToHostCommand, returnToHost };
			return new CommandSequence(commands);
		}
	}
}