
using System;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class DroneCommandProcessor : CommandProcessor<DroneCommands>
	{
		[SerializeField]
		private MoveCommandProcessor _moveProcessor = null;
		[SerializeField]
		private AddToHostCommandProcessor _addToHostProcessor = null;

		Command _currentCommand = null;

		internal override void processSingle(Command command)
		{
			if (command is MoveCommand)
				_moveProcessor.Process(command as MoveCommand);
			else if (command is AddToHostCommand)
				_addToHostProcessor.Process(command as AddToHostCommand);
			else
				throw new NotImplementedException();
		}

		internal override void stopSingleProcess(Command command)
		{
			if (command is MoveCommand)
				_moveProcessor.StopProcess(command as MoveCommand);
			else if(command is AddToHostCommand)
				_addToHostProcessor.StopProcess(command as AddToHostCommand);
			else
				throw new NotImplementedException();
		}
	}
}