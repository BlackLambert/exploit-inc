
using System;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class DroneCommandProcessor : CommandProcessor<DroneCommands>
	{
		[SerializeField]
		private MoveCommandProcessor _moveProcessor = null;
		[SerializeField]
		private AddToHostCommandProcessor _addToHostProcessor = null;
		[SerializeField]
		private ExploitResourceCommandProcessor _exploitResourceProcessor = null;
		[SerializeField]
		private ReserveResourceContainerCommandProcessor _reserveResourceContainerProcessor = null;
		[SerializeField]
		private PromiseDeliverableCommandProcessor _promiseDeliverableProcessor = null;
		[SerializeField]
		private PlaceDeliverableCommandProcessor _placeDeliverableProcessor = null;
		[SerializeField]
		private ReturnToHostCommandProcessor _returnToHostProcessor = null;

		internal override void processSingle(Command command)
		{
			if (command is MoveCommand)
				_moveProcessor.Process(command as MoveCommand);
			else if (command is AddToHostCommand)
				_addToHostProcessor.Process(command as AddToHostCommand);
			else if (command is ExploitResourceCommand)
				_exploitResourceProcessor.Process(command as ExploitResourceCommand);
			else if (command is ReserveResourceContainerCommand)
				_reserveResourceContainerProcessor.Process(command as ReserveResourceContainerCommand);
			else if (command is PromiseDeliverableCommand)
				_promiseDeliverableProcessor.Process(command as PromiseDeliverableCommand);
			else if (command is PlaceDeliverableCommand)
				_placeDeliverableProcessor.Process(command as PlaceDeliverableCommand);
			else if (command is ReturnToHostCommand)
				_returnToHostProcessor.Process(command as ReturnToHostCommand);
			else
				throw new NotImplementedException($"The command {command.GetType()} can not be processed yet");
		}

		internal override void stopSingleProcess(Command command)
		{
			if (command is MoveCommand)
				_moveProcessor.StopProcess(command as MoveCommand);
			else if(command is AddToHostCommand)
				_addToHostProcessor.StopProcess(command as AddToHostCommand);
			else if (command is ExploitResourceCommand)
				_exploitResourceProcessor.StopProcess(command as ExploitResourceCommand);
			else if (command is ReserveResourceContainerCommand)
				_reserveResourceContainerProcessor.StopProcess(command as ReserveResourceContainerCommand);
			else if (command is PromiseDeliverableCommand)
				_promiseDeliverableProcessor.StopProcess(command as PromiseDeliverableCommand);
			else if (command is PlaceDeliverableCommand)
				_placeDeliverableProcessor.StopProcess(command as PlaceDeliverableCommand);
			else if (command is ReturnToHostCommand)
				_returnToHostProcessor.StopProcess(command as ReturnToHostCommand);
			else
				throw new NotImplementedException($"The command {command.GetType()} can not be processed yet");
		}
	}
}