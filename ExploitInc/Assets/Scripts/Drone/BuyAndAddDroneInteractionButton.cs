
using Zenject;

namespace SBaier.ExploitInc
{
	public class BuyAndAddDroneInteractionButton : InteractionMenuButton
	{
		private DroneSpawn _spawn;
		private DroneHost _droneHost;
		private DroneCommandsFactory _commandsFactory;
		private DroneFactory _factory;
		private DroneConfig _droneConfig;
		private MissionData _missionData;

		[Inject]
		private void Construct(DroneFactory factory,
			DroneHost droneHost,
			DroneCommandsFactory commandsFactory,
			DroneSpawn Spawn,
			DroneConfig droneConfig,
			MissionData missionData)
		{
			_factory = factory;
			_spawn = Spawn;
			_droneConfig = droneConfig;
			_missionData = missionData;
			_droneHost = droneHost;
			_commandsFactory = commandsFactory;
		}

		protected override void doOnClickActions()
		{
			buyDrone();
		}

		protected override void OnEnable()
		{
			base.OnEnable();
			_missionData.OnCurrentMoneyChanged += checkButtonActive;
			_spawn.Host.OnActiveDroneAdded += onDronesChanged;
			_spawn.Host.OnActiveDroneRemoved += onDronesChanged;
			checkButtonActive();
		}

		protected override void OnDisable()
		{
			base.OnDisable();
			_missionData.OnCurrentMoneyChanged -= checkButtonActive;
			_spawn.Host.OnActiveDroneAdded -= onDronesChanged;
			_spawn.Host.OnActiveDroneRemoved -= onDronesChanged;
		}

		private void checkButtonActive()
		{
			_button.interactable = _missionData.CurrentMoney >= _droneConfig.GetBuyCostsOf(_spawn.SpawnedDronesCount);
		}

		private void buyDrone()
		{
			_missionData.RequestMoney(_droneConfig.GetBuyCostsOf(_spawn.SpawnedDronesCount));
			Drone result = _factory.Create(_spawn.Host.SpawnPoint.position);
			_spawn.AddNew (result);
			Drone drone = _spawn.Host.Remove();
			Command command = _commandsFactory.Create(new AddToHostDroneCommandParameter(_droneHost));
			drone.Commander.AddCommand(command);
		}

		private void onDronesChanged(Drone obj)
		{
			checkButtonActive();
		}
	}
}