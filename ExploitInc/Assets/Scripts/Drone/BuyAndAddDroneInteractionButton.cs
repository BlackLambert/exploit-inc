
using Zenject;

namespace SBaier.ExploitInc
{
	public class BuyAndAddDroneInteractionButton : MenuButton
	{
		private DroneSpawn _spawn;
		private DroneHost _droneHost;
		private DroneConfig _droneConfig;
		private MissionData _missionData;
		private BuyAndAddDroneAction _action;

		[Inject]
		private void Construct(
			DroneHost droneHost,
			DroneSpawn Spawn,
			MissionData missionData,
			BuyAndAddDroneAction action,
			DroneConfig droneConfig)
		{
			_spawn = Spawn;
			_missionData = missionData;
			_droneHost = droneHost;
			_action = action;
			_droneConfig = droneConfig;
		}

		protected override void doOnClickActions()
		{
			buyDrone();
		}

		protected override void OnEnable()
		{
			base.OnEnable();
			_missionData.OnCurrentMoneyChanged += checkButtonActive;
			_spawn.Host.OnActiveDroneAdded += onDronesChanged;
			_spawn.Host.OnActiveDroneRemoved += onDronesChanged;
			checkButtonActive();
		}

		protected override void OnDisable()
		{
			base.OnDisable();
			_missionData.OnCurrentMoneyChanged -= checkButtonActive;
			_spawn.Host.OnActiveDroneAdded -= onDronesChanged;
			_spawn.Host.OnActiveDroneRemoved -= onDronesChanged;
		}

		private void checkButtonActive()
		{
			_button.interactable = _missionData.CurrentMoney >= _droneConfig.GetBuyCostsOf(_spawn.SpawnedDronesCount);
		}

		private void buyDrone()
		{
			_action.Invoke(_droneHost);
		}

		private void onDronesChanged(Drone obj)
		{
			checkButtonActive();
		}
	}
}