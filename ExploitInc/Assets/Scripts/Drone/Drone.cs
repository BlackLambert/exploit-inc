using System;
using System.Collections;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class Drone : MonoBehaviour
	{
		[SerializeField]
		private Transform _base = null;
		public Transform Base => _base;
		[SerializeField]
		private Transform _object = null;
		[SerializeField]
		private Transform _deliverableHook = null;
		[SerializeField]
		private DroneActivityProgressDisplay _activityProgressDisplay = null;
		public DroneActivityProgressDisplay ActivityProgressDisplay => _activityProgressDisplay;

		public DroneCommander Commander { get; private set; }

		[SerializeField]
		private MovablePlanetObject _movable = null;
		public MovablePlanetObject Movable => _movable;



		public Deliverable Deliverable { get; private set; } = null;


		[Inject]
		private void Construct(DroneCommander commander)
		{
			Commander = commander;
		}


		public void Hide()
		{
			_object.gameObject.SetActive(false);
		}

		public void Show()
		{
			_object.gameObject.SetActive(true);
		}

		public void AddDeliverable(Deliverable deliverable)
		{
			if (Deliverable != null)
				throw new InvalidOperationException();
			Deliverable = deliverable;
			Deliverable.Base.SetParent(_deliverableHook, false);
		}

		public void RemoveDeliverable(Deliverable deliverable)
		{
			if (Deliverable != deliverable)
				throw new ArgumentException();
			Deliverable = null;
		}
	}
}