using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class DroneHost : MonoBehaviour
	{
		[SerializeField]
		private Transform _spawnPoint = null;
		public Transform SpawnPoint => _spawnPoint;


		private List<Drone> _activeDrones = new List<Drone>();
		public int ActiveCount => _activeDrones.Count;
		public List<Drone> ActiveDronesCopy => new List<Drone>(_activeDrones);

		private List<Drone> _idlingDrones = new List<Drone>();
		public int IdlingCount => _idlingDrones.Count;
		public List<Drone> IdlingDronesCopy => new List<Drone>(_idlingDrones);

		public event Action<Drone> OnIdlingDroneAdded;
		public event Action<Drone> OnIdlingDroneRemoved;
		public event Action<Drone> OnActiveDroneAdded;
		public event Action<Drone> OnActiveDroneRemoved;

		public void Add(Drone drone)
		{
			if (_activeDrones.Contains(drone))
				throw new ArgumentException();
			_activeDrones.Add(drone);
			OnActiveDroneAdded?.Invoke(drone);
			Return(drone);
		}

		public void Return(Drone drone)
		{
			if (drone == null)
				throw new ArgumentNullException();
			if (!_activeDrones.Contains(drone) || _idlingDrones.Contains(drone))
				throw new ArgumentException();
			_idlingDrones.Add(drone);
			//drone.Movable.MoveTo(SpawnPoint.position, true);
			//if(_deactiveDroneOnReturn)
			//	drone.Hide();
			OnActiveDroneAdded?.Invoke(drone);
			OnIdlingDroneAdded?.Invoke(drone);
		}

		public Drone Request()
		{
			if (IdlingCount <= 0)
				throw new InvalidOperationException();
			Drone result = _idlingDrones[IdlingCount - 1];
			_idlingDrones.RemoveAt(IdlingCount - 1);
			OnIdlingDroneRemoved?.Invoke(result);
			
			return result;
		}

		public Drone Remove()
		{
			if (IdlingCount <= 0)
				throw new InvalidOperationException();
			Drone first = _idlingDrones.First();
			Remove(first);
			return first;
		}

		public void Remove(Drone drone)
		{
			if (!_activeDrones.Contains(drone) || !_idlingDrones.Contains(drone))
				throw new ArgumentException();
			_idlingDrones.Remove(drone);
			_activeDrones.Remove(drone);
			OnIdlingDroneRemoved?.Invoke(drone);
			OnActiveDroneRemoved?.Invoke(drone);
			//drone.Show();
		}
	}
}