/*using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public struct SphereCoordinates 
	{
		public Vector3 WorldPoint { get; }
		public Vector3 Center { get; }
		public Vector3 SpherePoint { get; }
		public float Radius { get { return SpherePoint.x; } }
		public float Inclination { get { return SpherePoint.y; } }
		public float Azimuth { get { return SpherePoint.z; } }

		public SphereCoordinates(Vector3 worldPoint, Vector3 center)
		{
			WorldPoint = worldPoint;
			Center = center; 
			SpherePoint = ToSpherePoint(worldPoint, center);
		}

		public SphereCoordinates(float radius, float inclination, float azimuth)
		{
			WorldPoint = ToWorldPoint(new Vector3(radius, inclination, azimuth));

		}


		public static Vector3 ToSpherePoint(Vector3 worldPoint, Vector3 center)
		{
			Vector3 centerToPoint = worldPoint - center;
			float radius = centerToPoint.magnitude;
			float inclination = Mathf.Acos(centerToPoint.z / radius);
			float azimuth = Mathf.Atan(centerToPoint.y / centerToPoint.x);
			return new Vector3(radius, inclination, azimuth);
		}

		public static Vector3 ToWorldPoint(Vector3 SpherePoint)
		{

		}

		public float DistanceTo(SphereCoordinates coordinates)
		{
			 return Mathf.Sqrt(Radius * Radius +
				 coordinates.Radius * coordinates.Radius -
				 2 * Radius * coordinates.Radius * 
				 (Mathf.Sin(Inclination) * Mathf.Sin(coordinates.Inclination) * Mathf.Cos(Azimuth - coordinates.Azimuth) +
				 Mathf.Cos(Inclination) * Mathf.Cos(coordinates.Inclination)));
		}
	}
}*/