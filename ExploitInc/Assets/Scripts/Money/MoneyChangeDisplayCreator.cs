using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class MoneyChangeDisplayCreator : MonoBehaviour
	{
		private PrefabFactory _factory;
		private MissionData _missionData;

		[SerializeField]
		private Transform _hook = null;
		[SerializeField]
		private MoneyChangeDisplay _earnedMoneyDisplayPrefab = null;
		[SerializeField]
		private MoneyChangeDisplay _paidMoneyDisplayPrefab = null;

		[Inject]
		private void Constrcut(PrefabFactory factory,
			MissionData missionData)
		{
			_factory = factory;
			_missionData = missionData;
		}


		protected virtual void Start()
		{
			_missionData.OnCurrentMoneyChanged += onMoneyChanged;
		}

		protected virtual void OnDestroy()
		{
			_missionData.OnCurrentMoneyChanged -= onMoneyChanged;
		}

		private void onMoneyChanged(double delta)
		{
			createDisplay(delta);
		}

		private void createDisplay(double delta)
		{
			if (delta == 0)
				return;
			MoneyChangeDisplay result;
			if (delta > 0)
				result = _factory.Create(_earnedMoneyDisplayPrefab, new PrefabFactory.Parameter[] { new PrefabFactory.Parameter(delta) });
			else
				result = _factory.Create(_paidMoneyDisplayPrefab, new PrefabFactory.Parameter[] { new PrefabFactory.Parameter(Math.Abs(delta)) });
			result.Base.SetParent(_hook, false);
			result.Base.localPosition = Vector3.zero;
			Debug.Log("Create display");
		}
	}
}