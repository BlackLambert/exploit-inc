using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class InteractionMenu : MonoBehaviour
	{
		private const float _elementShowAnimationTime = 0.25f;
		private List<PlanetInteractionMenuElement> _elements = new List<PlanetInteractionMenuElement>();

		[SerializeField]
		private Transform _elementHook = null;
		[SerializeField]
		private Transform _objectBase = null;
		[SerializeField]
		private Transform _menuBase = null;
		[SerializeField]
		private float _showTime = 0.33f;
		[SerializeField]
		private CanvasGroup _group = null;
		[SerializeField]
		private float _hideTime = 0.5f;

		private bool _shown = false;
		private Coroutine _activeShowRoutine = null;
		private Coroutine _activeHideRoutine = null;

		private Camera _cam;
		private InteractionMenuParameters _parameters;


		[Inject]
		private void Construct([Inject(Id = "InputCamera")]Camera cam,
			InteractionMenuParameters parameters)
		{
			_cam = cam; 
			_parameters = parameters;
		}
		protected virtual void Awake()
		{
			_group.interactable = false;
			_group.alpha = 0;
			_group.blocksRaycasts = false;
			_menuBase.position = _cam.WorldToScreenPoint(_parameters.Position);
		}

		protected virtual void OnEnable()
		{
			reorder();
		}

		protected virtual void Update()
		{
			_menuBase.position = _cam.WorldToScreenPoint(_parameters.Position);
		}

		public void Show()
		{
			if (_activeHideRoutine != null ||
				_shown || _activeShowRoutine != null)
				return;

			_group.interactable = true;
			_group.alpha = 1;
			_group.blocksRaycasts = true;
			_shown = true;
			_activeShowRoutine = StartCoroutine(show());
		}

		private IEnumerator show()
		{
			float deltaTime = _elements.Count > 0 ? _showTime / _elements.Count : 0;
			foreach (PlanetInteractionMenuElement element in _elements)
			{
				element.Show();
				yield return new WaitForSeconds(deltaTime);
			}
			yield return new WaitForSeconds(_elementShowAnimationTime);
			_activeShowRoutine = null;
		}

		public void Hide()
		{
			if (_activeHideRoutine != null || !_shown)
				return;

			if (_activeShowRoutine != null)
				StopCoroutine(_activeShowRoutine);

			_shown = false;
			_group.interactable = false;
			_activeHideRoutine = StartCoroutine(hide());
		}

		private IEnumerator hide()
		{
			foreach (PlanetInteractionMenuElement element in _elements)
				element.Hide();
			yield return new WaitForSeconds(_hideTime); 
			_group.alpha = 0;
			_group.blocksRaycasts = false;
			_activeHideRoutine = null;
			Destroy(_objectBase.gameObject);
		}

		public void AddElement(PlanetInteractionMenuElement element)
		{
			_elements.Add(element);
			element.Base.SetParent(_elementHook, false);
			if (_shown)
				element.Show();
			reorder();
		}

		public void RemoveElement(PlanetInteractionMenuElement element)
		{
			if (!_elements.Contains(element))
				return;
			element.Hide();
			element.Base.SetParent(null);
			_elements.Remove(element);
			reorder();
		}

		private void reorder()
		{
			int count = _elements.Count;
			if (count == 0)
				return;
			float deltaAngle = 360 / count;
			for(int i = 0; i < count; i++)
			{
				PlanetInteractionMenuElement element = _elements[i];
				element.RotateTo((deltaAngle / 360) * i);
			}
		}
	}
}