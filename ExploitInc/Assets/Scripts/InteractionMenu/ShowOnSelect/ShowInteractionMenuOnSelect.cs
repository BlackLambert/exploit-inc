using SBaier.Input;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class ShowInteractionMenuOnSelect : MonoBehaviour
	{
		[SerializeField]
		private Selectable _selectable = null;

		private InteractionMenuFactory _menuFactory;
		private MissionSelector _selector;

		private CurrentInteractionMenu _currentMenu;

		[Inject]
		private void Construct(InteractionMenuFactory factory,
			 MissionSelector selector,
			 CurrentInteractionMenu currentMenu)
		{
			_menuFactory = factory;
			_selector = selector;
			_currentMenu = currentMenu;
		}

		protected virtual void OnEnable()
		{
			_selectable.OnSelect += onSelect;
			_selectable.OnDeselect += onDeselect;
		}

		protected virtual void OnDisable()
		{
			_selectable.OnSelect -= onSelect;
			_selectable.OnDeselect -= onDeselect;
		}

		private void onSelect(SelectableInputEventArgs args)
		{
			List<InteractionMenuElementParameters> elements = getParameters();
			if (elements.Count <= 0)
				return;
			_currentMenu.Current = _menuFactory.Create(new InteractionMenuParameters(args.RaycastHit.Point, elements, deselect));
			_currentMenu.Current.Show();
		}

		private void deselect()
		{
			_selector.Deselect();
		}

		private void onDeselect()
		{
			if (_currentMenu.Current != null)
				_currentMenu.Current.Hide();
		}

		protected abstract List<InteractionMenuElementParameters> getParameters();
	}
}