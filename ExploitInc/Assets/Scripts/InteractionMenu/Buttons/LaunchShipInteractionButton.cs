using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Zenject;

namespace SBaier.ExploitInc
{
	public class LaunchShipInteractionButton : MonoBehaviour
	{
		[SerializeField]
		private Button _button = null;

		private InteractionMenuParameters _menuParameters;
		private MissionData _missionData;
		private ShipCommander _shipCommander;
		private ShipCommandFactory _shipCommandFactory;

		[Inject]
		private void Construct(InteractionMenuParameters menuParameters,
			ShipCommander shipCommander,
			ShipCommandFactory shipCommandFactory,
			MissionData missionData)
		{
			_menuParameters = menuParameters;
			_shipCommander = shipCommander;
			_shipCommandFactory = shipCommandFactory;
			_missionData = missionData;
		}


		protected virtual void OnEnable()
		{
			_button.onClick.AddListener(onClick);
		}

		protected virtual void OnDisable()
		{
			_button.onClick.RemoveListener(onClick);
		}



		private void onClick()
		{
			_missionData.State = MissionState.Failed;
			Command command = _shipCommandFactory.Create(new LaunchShipCommandParameter());
			command.OnStateChanged += onCommandStateChanged;
			_shipCommander.AddCommand(command);
			_menuParameters.CloseAction.Invoke();
		}

		private void onCommandStateChanged(Command.StateChangeArgs args)
		{
			if (args.NewState == CommandState.Canceled)
			{
				_missionData.State = MissionState.OnGoing;
				args.Command.OnStateChanged -= onCommandStateChanged;
			}
			if(args.NewState == CommandState.Finished)
				args.Command.OnStateChanged -= onCommandStateChanged;
		}
	}
}