using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class RemoveDroneInteractionButton : MenuButton
	{
		private DroneHost _droneHost;
		private DroneSpawn _droneSpawn;
		private DroneCommandsFactory _commandsFactory;


		[Inject]
		private void Construct(DroneHost droneHost,
			DroneSpawn droneSpawn,
			DroneCommandsFactory commandsFactory)
		{
			_droneHost = droneHost;
			_droneSpawn = droneSpawn;
			_commandsFactory = commandsFactory;
		}

		protected virtual void Start()
		{
			_droneHost.OnIdlingDroneAdded += onDronesChange;
			_droneHost.OnIdlingDroneRemoved += onDronesChange;
			checkButtonInteractable();
		}

		protected virtual void OnDestroy()
		{
			_droneHost.OnIdlingDroneAdded -= onDronesChange;
			_droneHost.OnIdlingDroneRemoved -= onDronesChange;
		}

		private void onDronesChange(Drone obj)
		{
			checkButtonInteractable();
		}

		private void checkButtonInteractable()
		{
			_button.interactable = _droneHost.IdlingCount > 0;
		}

		protected override void doOnClickActions()
		{
			Drone drone = _droneHost.Remove();
			Command command = _commandsFactory.Create(new AddToHostDroneCommandParameter(_droneSpawn.Host));
			drone.Commander.AddCommand(command);
		}
	}
}