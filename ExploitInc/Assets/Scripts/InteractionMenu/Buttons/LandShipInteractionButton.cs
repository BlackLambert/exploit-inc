
using UnityEngine;
using UnityEngine.UI;
using Zenject;

namespace SBaier.ExploitInc
{
	public class LandShipInteractionButton : MenuButton
	{
		[SerializeField]
		private PlacementPreviewObjectInstaller _previewPrefab = null;

		private ShipCommandFactory _commandFactory;
		private ShipCommander _commander;
		private MissionData _missionData;
		private PlacementPreviewFactory _placementPreviewFactory;
		private PlacementPreviewObjectFactory _placementPreviewObjectFactory;
		private CurrentPlacementPreview _currentPlacementPreview;
		private InteractionMenuParameters _parameters;

		[Inject]
		private void Construct(
			ShipCommandFactory commandFactory,
			ShipCommander commander,
			MissionData missionData,
			PlacementPreviewFactory placementPreviewFactory,
			PlacementPreviewObjectFactory placementPreviewObjectFactory,
			CurrentPlacementPreview currentPlacementPreview,
			InteractionMenuParameters parameters)
		{
			_commandFactory = commandFactory;
			_commander = commander;
			_missionData = missionData;
			_placementPreviewFactory = placementPreviewFactory;
			_placementPreviewObjectFactory = placementPreviewObjectFactory;
			_currentPlacementPreview = currentPlacementPreview;
			_parameters = parameters;
		}


		protected override void doOnClickActions()
		{
			_parameters.CloseAction.Invoke();
			createPlacementPreview();
		}

		private void createPlacementPreview()
		{
			PrefabFactory.Parameter[] prefabFactoryParameters = new PrefabFactory.Parameter[] { };
			PlacementPreviewObject obj = _placementPreviewObjectFactory.Create(new PlacementPreviewObjectParameter(prefabFactoryParameters, _previewPrefab));
			PlacementPreviewParameter parameter = new PlacementPreviewParameter(obj, onPreviewSubmit, cancelPreview);
			_currentPlacementPreview.Current = _placementPreviewFactory.Create(parameter);
			_currentPlacementPreview.Current.SetPosition(_parameters.Position);
			_currentPlacementPreview.Current.Show();
		}

		private void onPreviewSubmit(Vector3 position)
		{
			setShipCommand(position);
			cancelPreview();
		}

		private void setShipCommand(Vector3 position)
		{
			Command landCommand = _commandFactory.Create(new LandShipCommandParameter(new MoveShipCommandParameter(position)));
			landCommand.OnStateChanged += onCommandStateChanged;
			_commander.AddCommand(landCommand);
			_missionData.State = MissionState.Landing;
		}

		private void cancelPreview()
		{
			if (_currentPlacementPreview.Current == null)
				return;
			_currentPlacementPreview.Current.Hide();
			_currentPlacementPreview.Current = null;
		}

		private void onCommandStateChanged(Command.StateChangeArgs args)
		{
			if (args.NewState == CommandState.Finished)
			{
				_missionData.State = MissionState.OnGoing;
				args.Command.OnStateChanged -= onCommandStateChanged;
			}
			else if (args.NewState == CommandState.Canceled)
			{
				_missionData.State = MissionState.Preparation;
				args.Command.OnStateChanged -= onCommandStateChanged;
			}
		}
	}
}