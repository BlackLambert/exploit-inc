using UnityEngine;
using UnityEngine.UI;
using Zenject;

namespace SBaier.ExploitInc
{
	public class BuyBuildingInteractionButton : InteractionMenuButton
	{
		private BuildingConfig _buildingConfig;
		private PlacementPreviewFactory _placementPreviewFactory;
		private PlacementPreviewObjectFactory _placementPreviewObjectFactory;
		private CurrentPlacementPreview _currentPlacementPreview;
		private BuildingFactory _buildingFactory;
		private MissionData _missionData;

		[Inject]
		private void Construct(BuildingConfig buildingConfig,
			PlacementPreviewFactory placementPreviewFactory,
			PlacementPreviewObjectFactory placementPreviewObjectFactory,
			CurrentPlacementPreview currentPlacementPreview,
			BuildingFactory buildingFactory,
			MissionData missionData)
		{
			_buildingConfig = buildingConfig;
			_placementPreviewFactory = placementPreviewFactory;
			_placementPreviewObjectFactory = placementPreviewObjectFactory;
			_currentPlacementPreview = currentPlacementPreview;
			_buildingFactory = buildingFactory;
			_missionData = missionData;
		}

		protected override void doOnClickActions()
		{
			createPlacementPreview();
		}

		private void createPlacementPreview()
		{
			PrefabFactory.Parameter buildingConfigParam = new PrefabFactory.Parameter(_buildingConfig, typeof(BuildingConfig));
			PrefabFactory.Parameter costsParam = new PrefabFactory.Parameter(new Costs(_buildingConfig.CreditsToBuild), typeof(Costs));
			PrefabFactory.Parameter[] prefabFactoryParameters = new PrefabFactory.Parameter[] { buildingConfigParam, costsParam };
			PlacementPreviewObject obj = _placementPreviewObjectFactory.Create(new PlacementPreviewObjectParameter(prefabFactoryParameters, _buildingConfig.PreviewPrefab));
			PlacementPreviewParameter parameter = new PlacementPreviewParameter(obj, onPreviewSubmit, cancelPreview);
			_currentPlacementPreview.Current = _placementPreviewFactory.Create(parameter);
			_currentPlacementPreview.Current.SetPosition(_menuParameters.Position);
			_currentPlacementPreview.Current.Show();
		}

		private void onPreviewSubmit(Vector3 position)
		{
			cancelPreview();
			_missionData.RequestMoney(_buildingConfig.CreditsToBuild);
			placeBuilding(position);
		}

		private void placeBuilding(Vector3 position)
		{
			_buildingFactory.Create(_buildingConfig, position);
		}

		private void cancelPreview()
		{
			if (_currentPlacementPreview.Current == null)
				return;
			_currentPlacementPreview.Current.Hide();
			_currentPlacementPreview.Current = null;
		}
	}
}