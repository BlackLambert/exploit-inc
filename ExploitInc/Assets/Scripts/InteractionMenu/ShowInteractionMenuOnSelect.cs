using SBaier.Input;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ShowInteractionMenuOnSelect : MonoBehaviour
	{
		[SerializeField]
		private Selectable _selectable = null;
		[SerializeField]
		private InteractionMenuContext _interactionMenuContext = InteractionMenuContext.Unset;

		private InteractionMenuFactory _menuFactory;
		private MissionSelector _selector;
		private InteractionMenuElementsParameterFactory _menuElementsParameterFactory;

		private CurrentInteractionMenu _currentMenu;

		[Inject]
		private void Construct(InteractionMenuFactory factory,
			 MissionSelector selector,
			 InteractionMenuElementsParameterFactory menuElementsParameterFactory,
			 CurrentInteractionMenu currentMenu)
		{
			_menuFactory = factory;
			_selector = selector;
			_menuElementsParameterFactory = menuElementsParameterFactory;
			_currentMenu = currentMenu;
		}

		protected virtual void OnEnable()
		{
			_selectable.OnSelect += onSelect;
			_selectable.OnDeselect += onDeselect;
		}

		protected virtual void OnDisable()
		{
			_selectable.OnSelect -= onSelect;
			_selectable.OnDeselect -= onDeselect;
		}

		private void onSelect(SelectableInputEventArgs args)
		{
			List<InteractionMenuElementParameters> elements = _menuElementsParameterFactory.Create(_interactionMenuContext);
			_currentMenu.Current = _menuFactory.Create(new InteractionMenuParameters(args.RaycastHit.Point, elements, () => _selector.Deselect()));
			if(_currentMenu.Current != null)
				_currentMenu.Current.Show();
		}

		private void onDeselect()
		{
			if (_currentMenu.Current != null)
				_currentMenu.Current.Hide();
		}
	}
}