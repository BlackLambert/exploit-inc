using System;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class InteractionMenuElementsParameterFactory : MonoBehaviour
	{
		[SerializeField]
		private InteractionMenuElement _landShipElement = null;
		[SerializeField]
		private InteractionMenuElement _buyBuildingElement = null;
		[SerializeField]
		private InteractionMenuElement _launchShipElement = null;
		[SerializeField]
		private InteractionMenuElement _addDroneElement = null;
		[SerializeField]
		private InteractionMenuElement _removeDroneElement = null;

		private MissionData _missionData;
		private MissionPreparationData _missionPreparationData;

		[Inject]
		private void Construct(MissionData missionData,
			MissionPreparationData missionPreparationData)
		{
			_missionData = missionData;
			_missionPreparationData = missionPreparationData;
		}

		public List<InteractionMenuElementParameters> Create(InteractionMenuContext context)
		{
			switch(context)
			{
				case InteractionMenuContext.Planet:
					return createPlanetInteractionMenuParameters();
				case InteractionMenuContext.Ship:
					return createShipInteractionMenuParameters();
				case InteractionMenuContext.Unset:
					throw new ArgumentException();
				default:
					throw new NotImplementedException();
			}
		}

		public List<InteractionMenuElementParameters> Create(Building building)
		{
			if (building is ProductionBuilding)
				return createProductionBuildingParameters(building as ProductionBuilding);
			throw new NotImplementedException();
		}

		private List<InteractionMenuElementParameters> createPlanetInteractionMenuParameters()
		{
			List<InteractionMenuElementParameters> result = new List<InteractionMenuElementParameters>();
			switch (_missionData.State)
			{
				case MissionState.Preparation:
					result.Add(new InteractionMenuElementParameters(_landShipElement));
					break;
				case MissionState.OnGoing:
					foreach (BuildingConfig buildingConfig in _missionPreparationData.SelectedBuildingsCopy)
					{
						PrefabFactory.Parameter[] parameters = new PrefabFactory.Parameter[] { new PrefabFactory.Parameter(buildingConfig, typeof(BuildingConfig)) };
						result.Add(new InteractionMenuElementParameters(_buyBuildingElement, parameters));
					}
					break;
			}
			return result;
		}

		private List<InteractionMenuElementParameters> createShipInteractionMenuParameters()
		{
			List<InteractionMenuElementParameters> result = new List<InteractionMenuElementParameters>();
			switch (_missionData.State)
			{
				case MissionState.OnGoing:
					result.Add(new InteractionMenuElementParameters(_launchShipElement));
					break;
			}
			return result;
		}

		private List<InteractionMenuElementParameters> createProductionBuildingParameters(ProductionBuilding building)
		{
			List<InteractionMenuElementParameters> result = new List<InteractionMenuElementParameters>();
			switch (_missionData.State)
			{
				case MissionState.OnGoing:
					PrefabFactory.Parameter droneHostParameter = new PrefabFactory.Parameter(building.DroneHost);
					result.Add(new InteractionMenuElementParameters(_addDroneElement, new PrefabFactory.Parameter[] { droneHostParameter }));
					result.Add(new InteractionMenuElementParameters(_removeDroneElement, new PrefabFactory.Parameter[] { droneHostParameter }));
					break;
			}
			return result;
		}
	}
}