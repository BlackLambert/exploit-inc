using System;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ExploitResourceCommandProcessor : SingleCommandProcessor<ExploitResourceCommand>
	{
		private Dictionary<ExploitResourceCommand, ExploitData> _commandToExploitData = new Dictionary<ExploitResourceCommand, ExploitData>();
		private ResourceConfigs _resourceConfigs;
		private WareFactory _wareFactory;

		[SerializeField]
		private Drone _drone = null;
		[SerializeField]
		private Animator _droneAnimator = null;
		[SerializeField]
		private string _armsClosedAnimationPrameter = "ArmsClosed";


		[Inject]
		private void Construct(ResourceConfigs resourceConfigs,
			WareFactory wareFactory)
		{
			_resourceConfigs = resourceConfigs;
			_wareFactory = wareFactory;
		}


		public override void Process(ExploitResourceCommand command)
		{
			if (_commandToExploitData.ContainsKey(command))
				throw new ArgumentException();
			ResourceConfig config = _resourceConfigs.Get(command.ResourceContainer.Type);
			_commandToExploitData[command] = new ExploitData(config);
			_drone.ActivityProgressDisplay.Show(config.TimeToExploit);
		}

		public override void StopProcess(ExploitResourceCommand command)
		{
			if (!_commandToExploitData.ContainsKey(command))
				throw new ArgumentException();
			clearCommand(command);
		}


		protected virtual void Update()
		{
			addTime();
			checkExploit();
		}

		private void addTime()
		{
			foreach (ExploitResourceCommand key in _commandToExploitData.Keys)
				_commandToExploitData[key].Time += Time.deltaTime;
		}

		private void checkExploit()
		{
			List<ExploitResourceCommand> keysToRemove = new List<ExploitResourceCommand>();
			foreach(KeyValuePair<ExploitResourceCommand, ExploitData> pair in _commandToExploitData)
			{
				if (pair.Value.Time < pair.Value.Config.TimeToExploit)
					break;
				finishExploit(pair.Key);
				keysToRemove.Add(pair.Key);
			}

			foreach (ExploitResourceCommand command in keysToRemove)
				clearCommand(command);
		}

		private void finishExploit(ExploitResourceCommand command)
		{
			ResourceContainer.TakeRessourceResult result = command.ResourceContainer.Take(1);
			if (result.ReceivedAmount == 0)
				throw new InvalidOperationException();
			Ware ware = _wareFactory.Create(command.Building.ResourceExploitBuildingConfig.ExploitConfig.Output.Type);
			_drone.ActivityProgressDisplay.Hide();
			_drone.AddDeliverable(ware);
			_droneAnimator.SetBool(_armsClosedAnimationPrameter, true);
			command.State = CommandState.Finished;
		}

		private void clearCommand(ExploitResourceCommand command)
		{
			_commandToExploitData.Remove(command);
			if (command.ResourceContainer.ReservingObject != _drone.gameObject)
				throw new ArgumentException();
			command.ResourceContainer.CancelReservation(_drone.gameObject);
		}

		private class ExploitData
		{
			public ResourceConfig Config { get; }
			public float Time { get; set; } = 0;


			public ExploitData(ResourceConfig config)
			{
				Config = config;
			}
		}
	}
}