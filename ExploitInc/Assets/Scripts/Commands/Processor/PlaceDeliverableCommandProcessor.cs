using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class PlaceDeliverableCommandProcessor : SingleCommandProcessor<PlaceDeliverableCommand>
	{
		[SerializeField]
		private Drone _drone = null;
		[SerializeField]
		private Animator _droneAnimator = null;
		[SerializeField]
		private float _landDuration = 0.5f;
		[SerializeField]
		private float _raiseDuration = 0.5f;
		[SerializeField]
		private string _flyingAnimationPrameter = "Flying";
		[SerializeField]
		private string _armsClosedAnimationPrameter = "ArmsClosed";

		private Coroutine _routine = null;

		public override void Process(PlaceDeliverableCommand command)
		{
			if (_drone.Deliverable == null)
				throw new InvalidOperationException();
			_routine = StartCoroutine(doStore(command));
			
		}

		private IEnumerator doStore(PlaceDeliverableCommand command)
		{
			_droneAnimator.SetBool(_flyingAnimationPrameter, false);
			_droneAnimator.SetBool(_armsClosedAnimationPrameter, false);
			yield return new WaitForSeconds(_landDuration);
			command.DeliveryContainer.Store(_drone.Deliverable);
			_drone.RemoveDeliverable(_drone.Deliverable);
			_droneAnimator.SetBool(_flyingAnimationPrameter, true);
			yield return new WaitForSeconds(_raiseDuration);
			command.State = CommandState.Finished;
		}

		public override void StopProcess(PlaceDeliverableCommand command)
		{
			_droneAnimator.SetBool(_flyingAnimationPrameter, true);
			_droneAnimator.SetBool(_armsClosedAnimationPrameter, true);
		}
	}
}