using System;
using System.Collections;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class PromiseDeliverableCommandProcessor : SingleCommandProcessor<PromiseDeliverableCommand>
	{
		[SerializeField]
		private Drone _drone = null;
		private Coroutine _coroutine = null;

		public override void Process(PromiseDeliverableCommand command)
		{
			if (_drone.Deliverable == null)
				throw new InvalidOperationException();
			_coroutine = StartCoroutine(doPromise(command));
		}

		private IEnumerator doPromise(PromiseDeliverableCommand command)
		{
			while (command.DeliveryContainer.Full)
				yield return 0;
			command.DeliveryContainer.Promise(_drone.Deliverable);
			command.State = CommandState.Finished;
		}

		public override void StopProcess(PromiseDeliverableCommand command)
		{
			command.DeliveryContainer.CancelPromiseOf(_drone.Deliverable);
			StopCoroutine(_coroutine);
		}
	}
}