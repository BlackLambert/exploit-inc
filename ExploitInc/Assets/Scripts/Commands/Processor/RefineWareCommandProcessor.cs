using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class RefineWareCommandProcessor : SingleCommandProcessor<RefineWareCommand>
	{
		[SerializeField]
		private Drone _drone = null;

		private WareFactory _wareFactory;
		private Coroutine _routine;

		[Inject]
		private void Construct(WareFactory wareFactory)
		{
			_wareFactory = wareFactory;
		}

		public override void Process(RefineWareCommand command)
		{
			validateCommand(command);
			_routine = StartCoroutine(doRefinement(command));
		}

		private IEnumerator doRefinement(RefineWareCommand command)
		{
			float duration = command.Building.WareRefinementBuildingConfig.Production.Duration;

			_drone.ActivityProgressDisplay.Show(duration);
			yield return new WaitForSeconds(duration);
			_drone.ActivityProgressDisplay.Hide();

			destroyInputWares(command);
			createOutputWares(command);
			command.State = CommandState.Finished;
		}

		private void validateCommand(RefineWareCommand command)
		{
			Production production = command.Building.WareRefinementBuildingConfig.Production;

			if (command.Building.WareOutput.SpaceLeft < production.Output.Amount)
				throw new InvalidOperationException("There is not enough space in the output container.");
		}

		private void destroyInputWares(RefineWareCommand command)
		{
			foreach (KeyValuePair<DeliveryContainer, List<Deliverable>> containerToDeliverables in command.InputWaresCopy)
			{
				foreach (Deliverable deliverable in containerToDeliverables.Value)
				{
					containerToDeliverables.Key.Take(deliverable);
					Destroy(deliverable.Base.gameObject);
				}
			}
		}

		private void createOutputWares(RefineWareCommand command)
		{
			Production production = command.Building.WareRefinementBuildingConfig.Production;

			for (int i = 0; i < production.Output.Amount; i++)
			{
				Ware refinedWare = _wareFactory.Create(production.Output.Type);
				command.Building.WareOutput.Promise(refinedWare);
				command.Building.WareOutput.Store(refinedWare);
			}
		}

		public override void StopProcess(RefineWareCommand command)
		{
			_drone.ActivityProgressDisplay.Hide();
			StopCoroutine(_routine);
		}
	}
}