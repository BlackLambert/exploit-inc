using System;
using System.Collections.Generic;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ShipCommandFactory
	{
		private Ship _ship;


		[Inject]
		private void Construct(Ship ship)
		{
			_ship = ship;
		}

		public Command Create(ShipCommandParameter parameter)
		{
			if(parameter is MoveShipCommandParameter)
			{
				MoveShipCommandParameter moveParameter = (MoveShipCommandParameter)parameter;
				MoveCommand first = new MoveCommand(moveParameter.Destination);
				return first;
			}
			else if(parameter is LandShipCommandParameter)
			{
				LandShipCommandParameter landParameter = (LandShipCommandParameter)parameter;
				MoveCommand moveCommand = (MoveCommand) Create(landParameter.MoveParameter);
				SetAnimatorTriggerCommand setTriggerCommand = new SetAnimatorTriggerCommand("Land");
				SetAnimatorBoolCommand setAnimatorBoolCommand = new SetAnimatorBoolCommand("Flying", false);
				WaitCommand waitCommand = new WaitCommand(1.5f);
				VerticalMoveCommand sinkCommand = new VerticalMoveCommand(_ship.HightDifferenceTo(landParameter.MoveParameter.Destination), _ship.LandDuration);
				List<Command> commands = new List<Command>() { moveCommand, setTriggerCommand, setAnimatorBoolCommand, waitCommand, sinkCommand };
				return new CommandSequence(commands);
			}
			else if (parameter is LaunchShipCommandParameter)
			{
				LaunchShipCommandParameter launchParameter = (LaunchShipCommandParameter)parameter;
				SetAnimatorTriggerCommand setTriggerCommand = new SetAnimatorTriggerCommand("SpaceLaunch");
				WaitCommand waitCommand = new WaitCommand(1f);
				VerticalMoveCommand sinkCommand = new VerticalMoveCommand(200, 30);
				List<Command> commands = new List<Command>() { setTriggerCommand, waitCommand, sinkCommand };
				return new CommandSequence(commands);
			}

			throw new NotImplementedException();
		}
	}
}