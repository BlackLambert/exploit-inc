using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	[RequireComponent(typeof(Collider))]
	public abstract class PositiveHighlighter<THighlightable> : MonoBehaviour where THighlightable : PositiveHighlightable
	{
		[SerializeField]
		private GameObject _sphere = null;

		private List<THighlightable> _highlightables = new List<THighlightable>();

		private bool _doHighlight = true;
		public bool DoHighlight
		{
			get => _doHighlight;
			set
			{
				_doHighlight = value;
				checkEnableHighlighing();
			}
		}

		private bool _isEnabled = false;
		private bool IsHighlighted => _isEnabled && _doHighlight;


		protected virtual void OnEnable()
		{
			_isEnabled = true;
			checkEnableHighlighing();
		}

		protected virtual void OnDisable()
		{
			_isEnabled = false;
			checkEnableHighlighing();
		}

		protected virtual void OnDestroy()
		{
			foreach (THighlightable highlightable in _highlightables)
				highlightable.Highlight(false);
		}

		protected virtual void OnTriggerEnter(Collider other)
		{
			THighlightable highlightable = other.GetComponent<THighlightable>();
			if (highlightable == null || _highlightables.Contains(highlightable))
				return;
			if (!isTarget(highlightable))
				return;
			_highlightables.Add(highlightable);
			if(IsHighlighted)
				highlightable.Highlight(IsHighlighted);
		}

		protected virtual void OnTriggerExit(Collider other)
		{
			THighlightable highlightable = other.GetComponent<THighlightable>();
			if (highlightable == null || !_highlightables.Contains(highlightable))
				return;
			if (IsHighlighted)
				highlightable.Highlight(false);
			_highlightables.Remove(highlightable);
		}
		private void checkEnableHighlighing()
		{
			_sphere.SetActive(IsHighlighted);
			foreach (THighlightable highlightable in _highlightables)
				highlightable.Highlight(IsHighlighted);
		}

		protected abstract bool isTarget(THighlightable highlightable);

	}
}