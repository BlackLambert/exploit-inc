using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	[RequireComponent(typeof(Collider))]
	public abstract class PositiveHighlighter<THighlightable> : MonoBehaviour where THighlightable : PositiveHighlightable
	{
		[SerializeField]
		private bool _highlightOnStart = false;
		[SerializeField]
		private GameObject _sphere = null;

		private List<THighlightable> _highlightables = new List<THighlightable>();

		private bool _doHighlight = false;
		public bool DoHighlight
		{
			get => _doHighlight;
			set
			{
				_doHighlight = value;
				_sphere.SetActive(_doHighlight);
				checkEnableHighlighing();
			}
		}

		protected virtual void Awake()
		{
			DoHighlight = _highlightOnStart;
		}

		protected virtual void OnDestroy()
		{
			foreach (THighlightable highlightable in _highlightables)
				highlightable.Highlight(false);
		}

		protected virtual void OnTriggerEnter(Collider other)
		{
			THighlightable highlightable = other.GetComponent<THighlightable>();
			if (highlightable == null || _highlightables.Contains(highlightable))
				return;
			bool highlight = checkHighlight(highlightable);
			if (!highlight)
				return;
			_highlightables.Add(highlightable);
			if(DoHighlight)
				highlightable.Highlight(highlight);
		}

		protected virtual void OnTriggerExit(Collider other)
		{
			THighlightable highlightable = other.GetComponent<THighlightable>();
			if (highlightable == null || !_highlightables.Contains(highlightable))
				return;
			if (DoHighlight)
				highlightable.Highlight(false);
			_highlightables.Remove(highlightable);
		}
		private void checkEnableHighlighing()
		{
			foreach (THighlightable highlightable in _highlightables)
				highlightable.Highlight(DoHighlight);
		}

		protected abstract bool checkHighlight(THighlightable highlightable);

	}
}