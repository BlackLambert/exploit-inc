
namespace SBaier.ExploitInc
{
	public abstract class ReplaceCommander<TCommandsContainer> : Commander<TCommandsContainer> where TCommandsContainer : CommandsContainer
	{
		public ReplaceCommander(TCommandsContainer container) : base(container)
		{
		}

		protected internal override void addCommand(Command command)
		{
			if(_container.Current != null && _container.Current.State != CommandState.Finished)
				_container.Current.State = CommandState.Canceled;
			_container.Current = command;
			_container.Current.OnStateChanged += onStateChange;
		}

		protected internal override void removeCommand(Command command)
		{
			if (_container.Current.State == CommandState.Finished)
				return;
			_container.Current.State = CommandState.Canceled;
		}

		private void onStateChange(Command.StateChangeArgs args)
		{
			switch(args.NewState)
			{
				case CommandState.Canceled:
				case CommandState.Finished:
					args.Command.OnStateChanged -= onStateChange;
					_container.Current = null;
					break;
			}
		}
	}
}