
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class CommandProcessor<TCommands> : MonoBehaviour where TCommands : CommandsContainer
	{
		protected TCommands _commands;

		[Inject]
		private void Construct(TCommands commands)
		{
			_commands = commands;
		}

		protected virtual void Start()
		{
			_commands.OnCurrentCommandChanged += onCurrentCommandChanged;
		}

		protected virtual void OnDestroy()
		{
			_commands.OnCurrentCommandChanged -= onCurrentCommandChanged;
		}

		private void onCurrentCommandChanged(CommandsContainer.CommandChangedArgs args)
		{
			if (args.Former != null)
			{
				args.Former.OnStateChanged -= onStateChanged;
			}
			if (args.Current != null)
			{
				args.Current.State = CommandState.OnGoing;
				args.Current.OnStateChanged += onStateChanged;
				process(args.Current);
			}
		}

		internal abstract void stopProcessing(Command command);

		internal abstract void process(Command command);

		private void onStateChanged(Command.StateChangeArgs obj)
		{
			if (obj.NewState != CommandState.Canceled && obj.FormerState == CommandState.OnGoing)
				return;
			stopProcessing(obj.Command);
		}
	}
}