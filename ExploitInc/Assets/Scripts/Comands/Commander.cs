using System;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class Commander<TCommandsContainer> where TCommandsContainer : CommandsContainer
	{
		protected TCommandsContainer _container;

		[Inject]
		private void Construct(TCommandsContainer container)
		{
			_container = container;
		}


		public void AddCommand(Command command)
		{
			validateCommandToAdd(command);
			addCommand(command);
		}
		public void RemoveCommand(Command command)
		{
			validateCommandToRemove(command);
			removeCommand(command);
		}

		public void CancelCurrentCommand()
		{
			if (_container.CurrentCommand == null | _container.CurrentCommand.State == CommandState.Canceled)
				return;
			removeCommand(_container.CurrentCommand);
		}

		protected virtual void validateCommandToAdd(Command command)
		{
			if (command == null)
				throw new ArgumentNullException();
			if (_container.CurrentCommand == command)
				return;
			validateCommandType(command);
		}

		protected virtual void validateCommandToRemove(Command command)
		{
			if (command == null)
				throw new ArgumentNullException();
			if (_container.CurrentCommand != command)
				throw new ArgumentException();
		}


		protected internal abstract void removeCommand(Command command);
		protected internal abstract void addCommand(Command command);
		protected internal abstract void validateCommandType(Command command);
	}
}