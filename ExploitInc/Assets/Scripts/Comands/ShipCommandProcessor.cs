using System;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ShipCommandProcessor : CommandProcessor<ShipCommands>
	{
		[SerializeField]
		private Movable _movable = null;

		protected override void Start()
		{
			base.Start();
			_movable.TargetReached += onMoveTargetReached;
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();
			_movable.TargetReached -= onMoveTargetReached;
		}


		private void onMoveTargetReached()
		{
			_commands.CurrentCommand.State = CommandState.Finished;
			Debug.Log("Finished ship movement");
		}

		internal override void stopProcessing(Command command)
		{
			if (command is MoveCommand)
			{
				MoveCommand moveCommand = (MoveCommand)command;
				_movable.CancelMovement();
				Debug.Log("Canceling ship movement");
			}
			else
				throw new NotImplementedException();
		}

		internal override void process(Command command)
		{
			if(command is MoveCommand)
			{
				MoveCommand moveCommand = (MoveCommand)command;
				_movable.MoveTo(moveCommand.Target);
			}
			else
				throw new NotImplementedException();
		}
	}
}