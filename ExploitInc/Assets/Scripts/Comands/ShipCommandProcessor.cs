using System;
using System.Collections;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ShipCommandProcessor : CommandProcessor<ShipCommands>
	{
		[SerializeField]
		private Movable _movable = null;
		[SerializeField]
		private Animator _animator = null;
		[SerializeField]
		private VerticalMover _verticalMover = null;

		private Command _currentCommand = null;
		private Coroutine _waitRoutine = null;




		internal override void processSingle(Command command)
		{
			if (command is MoveCommand)
			{
				MoveCommand moveCommand = (MoveCommand)command;
				_movable.MoveTo(moveCommand.Target);
				_movable.TargetReached += onMoveTargetReached;
				_currentCommand = command;
			}
			else if (command is SetAnimatorBoolCommand)
			{
				SetAnimatorBoolCommand setCommand = (SetAnimatorBoolCommand)command;
				_animator.SetBool(setCommand.ParameterName, setCommand.Value);
				command.State = CommandState.Finished;
				_currentCommand = null;
			}
			else if (command is SetAnimatorTriggerCommand)
			{
				SetAnimatorTriggerCommand setCommand = (SetAnimatorTriggerCommand)command;
				_animator.SetTrigger(setCommand.ParameterName);
				command.State = CommandState.Finished;
			}
			else if (command is VerticalMoveCommand)
			{
				VerticalMoveCommand moveCommand = (VerticalMoveCommand)command;
				_verticalMover.MoveBy(moveCommand.Delta, moveCommand.Duration);
				_verticalMover.OnMovementFinished += onVerticalMovementFinished;
				_currentCommand = command;
			}
			else if (command is WaitCommand)
			{
				WaitCommand waitCommand = (WaitCommand)command;
				_waitRoutine = StartCoroutine(setCommandFinished(command, waitCommand.Duration));
				_currentCommand = command;
			}
			else
				throw new NotImplementedException();

		}

		internal override void stopSingleProcess(Command command)
		{
			if (command is MoveCommand)
			{
				MoveCommand moveCommand = (MoveCommand)command;
				_movable.CancelMovement();
				_movable.TargetReached -= onMoveTargetReached;
				Debug.Log("Canceling ship movement");
			}
			else if(command is SetAnimatorBoolCommand)
			{
				
			}
			else if (command is SetAnimatorTriggerCommand)
			{

			}
			else if (command is VerticalMoveCommand)
			{
				_verticalMover.Cancel();
			}
			else if (command is WaitCommand)
			{
				StopCoroutine(_waitRoutine);
			}
			else
				throw new NotImplementedException();
		}
		private void onMoveTargetReached()
		{
			_currentCommand.State = CommandState.Finished;
			_movable.TargetReached -= onMoveTargetReached;
		}

		private void onVerticalMovementFinished()
		{
			_currentCommand.State = CommandState.Finished;
			_verticalMover.OnMovementFinished -= onVerticalMovementFinished;
		}

		private IEnumerator setCommandFinished(Command command, float duration)
		{
			yield return new WaitForSeconds(duration);
			command.State = CommandState.Finished;
		}
	}
}