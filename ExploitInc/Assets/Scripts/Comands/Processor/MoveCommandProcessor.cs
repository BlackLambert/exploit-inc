using System;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class MoveCommandProcessor : SingleCommandProcessor<MoveCommand>
	{
		private Dictionary<MoveCommand, Action> _actions = new Dictionary<MoveCommand, Action>();

		[SerializeField]
		private Movable _movable = null;
		


		public override void Process(MoveCommand command)
		{
			Action callback = () => onMoveTargetReached(command);
			_actions[command] = callback;
			_movable.TargetReached += callback;
			_movable.MoveTo(command.Target);
		}

		public override void StopProcess(MoveCommand command)
		{
			_movable.CancelMovement();
			_movable.TargetReached -= _actions[command];
			_actions.Remove(command);
		}


		private void onMoveTargetReached(MoveCommand command)
		{
			command.State = CommandState.Finished;
			_movable.TargetReached -= _actions[command];
			_actions.Remove(command);
		}
	}
}