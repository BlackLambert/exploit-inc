using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class CircularObjectOrganizer : ObjectOrganizer
	{
		[SerializeField]
		private Transform _hook = null;
		[SerializeField]
		private float _distance = 0;
		[SerializeField]
		private Vector3 _axis = new Vector3(0, 1, 0);
		[SerializeField]
		private Vector3 _foreward = new Vector3(0, 0, 1);
		[SerializeField]
		private float _startRotation = 0;
		[SerializeField]
		private float _delta = 0;


		private List<Transform> _organizedTransforms = new List<Transform>();

		public override void Add(Transform obj)
		{
			if (_organizedTransforms.Contains(obj))
				throw new ArgumentException();
			_organizedTransforms.Add(obj);
			obj.SetParent(_hook, false);
			reorganize(_organizedTransforms.Count - 1, obj);
		}

		public override void Remove(Transform obj)
		{
			if (!_organizedTransforms.Contains(obj))
				throw new ArgumentException();
			_organizedTransforms.Remove(obj);
			reorganize();
		}

		private void reorganize()
		{
			for (int i = 0; i < _organizedTransforms.Count; i++)
				reorganize(i, _organizedTransforms[i]);
		}

		private void reorganize(int index, Transform obj)
		{
			obj.localPosition = Vector3.zero;
			obj.localRotation = Quaternion.identity;
			float angle = _startRotation + _delta * index;
			obj.localPosition = _foreward.normalized * _distance;
			obj.RotateAround(_hook.position, _axis, angle);
		}
	}
}