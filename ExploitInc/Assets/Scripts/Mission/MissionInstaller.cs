using System;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class MissionInstaller : MonoInstaller
	{
		[Inject]
		private SelectedMission _selectedMission = null;

		[SerializeField]
		private InteractionMenuInstaller _menuPrefab = null;
		[SerializeField]
		private MissionCamera _missionCamera = null;
		[SerializeField]
		private Ship _ship = null;
		[SerializeField]
		private InteractionMenuElementsParameterFactory _interactionMenuElementsParameterFactoryPrefab = null;
		[SerializeField]
		private InfoBoxFactory _infoBoxFactoryPrefab = null;
		[SerializeField]
		private PlacementPreviewInstaller _placementPreviewPrefab = null;
		[SerializeField]
		private Ticker _tickerPrefab = null;
		[SerializeField]
		private WareSellingPoint _wareSellingPoint = null;
		[SerializeField]
		private DeliveryRoute _deliveryRoutePrefab = null;
		

		[Header("Testing")]
		[SerializeField]
		private List<BuildingConfig> _selectedBuildings = new List<BuildingConfig>();
		[SerializeField]
		private bool _testSelection = false;


		public override void InstallBindings()
		{
			if (_selectedMission.Parameters == null)
				throw new ArgumentException("There has to be a mission selected to load the mission screen.");

			Container.Bind(typeof(MissionSceneParameters)).To<MissionSceneParameters>().FromInstance(_selectedMission.Parameters.MissionSceneParameters).AsTransient();
			Container.Bind(typeof(StarsConfig)).To<StarsConfig>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.StarsConfig).AsTransient();
			Container.Bind(typeof(List<SunConfig>)).To<List<SunConfig>>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.SunsConfig).AsTransient();
			Container.Bind(typeof(PlanetConfig)).To<PlanetConfig>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.PlanetConfig).AsTransient();
			Container.Bind(typeof(PlanetInfo)).To<PlanetInfo>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.PlanetConfig.Info).AsTransient();
			Container.Bind(typeof(MissionCamera)).To<MissionCamera>().FromInstance(_missionCamera).AsSingle();

			Container.Bind(typeof(PrefabFactory)).To<PrefabFactory>().AsTransient();

			bindInteractionMenuModules();
			bindResourceContainerInfoModules();

			Container.Bind(typeof(MissionPreparationData)).To<MissionPreparationData>().FromInstance(createTestMissionPrepData()).AsSingle();
			Container.Bind(typeof(MissionData)).To<MissionData>().FromInstance(new MissionData(Time.time, _selectedMission.Parameters.MissionConfig.Budget)).AsSingle();
			Container.Bind(typeof(MissionConfig)).To<MissionConfig>().FromInstance(_selectedMission.Parameters.MissionConfig).AsSingle();
			Container.Bind(typeof(TaskConfig)).To<TaskConfig>().FromInstance(_selectedMission.Parameters.MissionConfig.Task).AsSingle();
			Container.Bind(typeof(MissionTimeSetter)).To<MissionTimeSetter>().FromNewComponentOnNewGameObject().AsSingle().NonLazy();

			new TaskBinder().BindTask(Container, _selectedMission.Parameters.MissionConfig.Task);
			bindShipModules();
			Container.Bind(typeof(MissionSelector)).To<MissionSelector>().FromNewComponentOnNewGameObject().AsSingle().WithArguments(_testSelection).NonLazy();

			bindPlacementPreviewModules();
			bindBuildingModules();
			bindMoneyModules();
			bindDeliveryModules();

			Container.Bind<Bender>().FromNewComponentOnNewGameObject().WithGameObjectName("WorldBender").AsSingle().NonLazy();
		}

		private void bindInteractionMenuModules()
		{
			Container.Bind(typeof(InteractionMenuFactory)).To<InteractionMenuFactory>().AsTransient().WithArguments(_menuPrefab);
			Container.Bind(typeof(InteractionMenuElementsParameterFactory)).To<InteractionMenuElementsParameterFactory>().FromComponentInNewPrefab(_interactionMenuElementsParameterFactoryPrefab).AsSingle();
			Container.Bind(typeof(CurrentInteractionMenu)).To<CurrentInteractionMenu>().AsSingle();
		}

		private void bindShipModules()
		{
			Container.Bind(typeof(ShipCommands)).To<ShipCommands>().AsSingle();
			Container.Bind(typeof(ShipCommander)).To<ShipCommander>().AsSingle();
			Container.Bind(typeof(ShipCommandFactory)).To<ShipCommandFactory>().AsTransient();
			Container.Bind(typeof(Ship)).To<Ship>().FromInstance(_ship).AsSingle();
		}

		private MissionPreparationData createTestMissionPrepData()
		{
			MissionPreparationData result = new MissionPreparationData();
			foreach(BuildingConfig config in _selectedBuildings)
				result.Add(config);
			return result;
		}

		private void bindResourceContainerInfoModules()
		{
			Container.Bind(typeof(InfoBoxFactory)).To<InfoBoxFactory>().FromComponentInNewPrefab(_infoBoxFactoryPrefab).AsSingle();
		}

		private void bindPlacementPreviewModules()
		{
			Container.Bind(typeof(PlacementPreviewFactory)).To<PlacementPreviewFactory>().AsTransient().WithArguments(_placementPreviewPrefab);
			Container.Bind(typeof(PlacementPreviewObjectFactory)).To<PlacementPreviewObjectFactory>().AsTransient();
			Container.Bind(typeof(CurrentPlacementPreview)).To<CurrentPlacementPreview>().AsSingle();
		}

		private void bindBuildingModules()
		{
			Container.Bind(typeof(BuildingFactory)).To<BuildingFactory>().AsTransient();
			Container.Bind(typeof(DeliveryContainerFactory)).To<DeliveryContainerFactory>().AsTransient();
			Container.Bind(typeof(BuiltBuildings)).To<BuiltBuildings>().AsSingle();
		}

		private void bindMoneyModules()
		{
			Container.Bind(typeof(CostsPerTick)).To<CostsPerTick>().FromNewComponentOnNewGameObject().AsSingle();
			Container.Bind(typeof(Ticker)).To<Ticker>().FromComponentInNewPrefab(_tickerPrefab).AsSingle();
			Container.Bind(typeof(BrokeChecker)).To<BrokeChecker>().FromNewComponentOnNewGameObject().AsSingle().NonLazy();
			Container.Bind(typeof(ApplyCostsPerTick)).To<ApplyCostsPerTick>().FromNewComponentOnNewGameObject().AsSingle().NonLazy();
			Container.Bind(typeof(WareSellingPoint)).To<WareSellingPoint>().FromInstance(_wareSellingPoint).AsSingle();
		}

		private void bindDeliveryModules()
		{
			Container.Bind(typeof(DeliveryRoutes)).To<DeliveryRoutes>().AsSingle();
			Container.Bind(typeof(DeliveryRouteFactory)).To<DeliveryRouteFactory>().AsTransient().WithArguments(_deliveryRoutePrefab);
		}
	}
}