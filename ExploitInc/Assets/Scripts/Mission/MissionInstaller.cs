using System;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class MissionInstaller : MonoInstaller
	{
		[Inject]
		private SelectedMission _selectedMission = null;

		[SerializeField]
		private PlanetInteractionMenu _menuPrefab = null;
		[SerializeField]
		private PlanetInteractionMenuElement _elementPrefab = null;
		[SerializeField]
		private MissionCamera _missionCamera = null;


		public override void InstallBindings()
		{
			if (_selectedMission.Parameters == null)
				throw new ArgumentException("There has to be a mission selected to load the mission screen.");

			Container.Bind(typeof(MissionSceneParameters)).To<MissionSceneParameters>().FromInstance(_selectedMission.Parameters.MissionSceneParameters).AsTransient();
			Container.Bind(typeof(StarsConfig)).To<StarsConfig>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.StarsConfig).AsTransient();
			Container.Bind(typeof(List<SunConfig>)).To<List<SunConfig>>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.SunsConfig).AsTransient();
			Container.Bind(typeof(PlanetConfig)).To<PlanetConfig>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.PlanetConfig).AsTransient();
			Container.Bind(typeof(PlanetInfo)).To<PlanetInfo>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.PlanetConfig.Info).AsTransient();
			Container.Bind(typeof(MissionCamera)).To<MissionCamera>().FromInstance(_missionCamera).AsSingle();

			Container.Bind(typeof(PrefabFactory)).To<PrefabFactory>().AsTransient();

			Container.Bind(typeof(PlanetInteractionMenu)).To<PlanetInteractionMenu>().FromComponentInNewPrefab(_menuPrefab).AsSingle();
			Container.Bind(typeof(PlanetInteractionMenuElement)).To<PlanetInteractionMenuElement>().FromInstance(_elementPrefab).AsSingle();
		}
	}
}