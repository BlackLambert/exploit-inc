using System;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class MissionInstaller : MonoInstaller
	{
		[Inject]
		private SelectedMission _selectedMission = null;

		[SerializeField]
		private InteractionMenuInstaller _menuPrefab = null;
		[SerializeField]
		private MissionCamera _missionCamera = null;
		[SerializeField]
		private Ship _ship = null;
		[SerializeField]
		private InteractionMenuElementsParameterFactory _interactionMenuElementsParameterFactoryPrefab = null;


		public override void InstallBindings()
		{
			if (_selectedMission.Parameters == null)
				throw new ArgumentException("There has to be a mission selected to load the mission screen.");

			Container.Bind(typeof(MissionSceneParameters)).To<MissionSceneParameters>().FromInstance(_selectedMission.Parameters.MissionSceneParameters).AsTransient();
			Container.Bind(typeof(StarsConfig)).To<StarsConfig>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.StarsConfig).AsTransient();
			Container.Bind(typeof(List<SunConfig>)).To<List<SunConfig>>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.SunsConfig).AsTransient();
			Container.Bind(typeof(PlanetConfig)).To<PlanetConfig>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.PlanetConfig).AsTransient();
			Container.Bind(typeof(PlanetInfo)).To<PlanetInfo>().FromInstance(_selectedMission.Parameters.MissionSceneParameters.PlanetConfig.Info).AsTransient();
			Container.Bind(typeof(MissionCamera)).To<MissionCamera>().FromInstance(_missionCamera).AsSingle();

			Container.Bind(typeof(PrefabFactory)).To<PrefabFactory>().AsTransient();

			bindInteractionMenuModules();

			Container.Bind(typeof(MissionData)).To<MissionData>().FromInstance(new MissionData(Time.time, _selectedMission.Parameters.MissionConfig.Budget)).AsSingle();
			Container.Bind(typeof(MissionConfig)).To<MissionConfig>().FromInstance(_selectedMission.Parameters.MissionConfig).AsSingle();
			Container.Bind(typeof(TaskConfig)).To<TaskConfig>().FromInstance(_selectedMission.Parameters.MissionConfig.Task).AsSingle();

			new TaskBinder().BindTask(Container, _selectedMission.Parameters.MissionConfig.Task);
			bindShipModules();
			Container.Bind(typeof(MissionSelector)).To<MissionSelector>().FromNewComponentOnNewGameObject().AsSingle().NonLazy();
		}

		private void bindInteractionMenuModules()
		{
			Container.Bind(typeof(InteractionMenuInstaller)).To<InteractionMenuInstaller>().FromInstance(_menuPrefab).AsSingle();
			Container.Bind(typeof(InteractionMenuFactory)).To<InteractionMenuFactory>().AsTransient();
			Container.Bind(typeof(InteractionMenuElementsParameterFactory)).To<InteractionMenuElementsParameterFactory>().FromComponentInNewPrefab(_interactionMenuElementsParameterFactoryPrefab).AsTransient();
		}

		private void bindShipModules()
		{
			Container.Bind(typeof(ShipCommands)).To<ShipCommands>().AsSingle();
			Container.Bind(typeof(ShipCommander)).To<ShipCommander>().AsSingle();
			Container.Bind(typeof(ShipCommandFactory)).To<ShipCommandFactory>().AsTransient();
			Container.Bind(typeof(Ship)).To<Ship>().FromInstance(_ship).AsSingle();
		}
	}
}