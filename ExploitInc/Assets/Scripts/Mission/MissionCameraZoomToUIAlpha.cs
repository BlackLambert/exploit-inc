using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class MissionCameraZoomToUIAlpha : MonoBehaviour
	{
		[SerializeField]
		private float _normalizedZoomMinAlphaBorder = 0.75f;
		[SerializeField]
		private float _normalizedZoomMaxAlphaBorder = 0.85f;
		[SerializeField]
		private CanvasGroup _canvasGroup = null;

		private MissionCamera _cam;

		[Inject]
		private void Construct(MissionCamera cam)
		{
			_cam = cam;
		}


		protected virtual void Update()
		{
			_canvasGroup.alpha = calculateAlpha();
		}

		private float calculateAlpha()
		{
			if (_cam.RelativeZoom < _normalizedZoomMinAlphaBorder && _normalizedZoomMinAlphaBorder < _normalizedZoomMaxAlphaBorder ||
				_cam.RelativeZoom > _normalizedZoomMinAlphaBorder && _normalizedZoomMinAlphaBorder > _normalizedZoomMaxAlphaBorder)
				return 0;
			if (_cam.RelativeZoom > _normalizedZoomMaxAlphaBorder && _normalizedZoomMinAlphaBorder < _normalizedZoomMaxAlphaBorder ||
				_cam.RelativeZoom < _normalizedZoomMaxAlphaBorder && _normalizedZoomMinAlphaBorder > _normalizedZoomMaxAlphaBorder)
				return 1;
			float shadyArea = Mathf.Abs( _normalizedZoomMaxAlphaBorder - _normalizedZoomMinAlphaBorder);
			if(_normalizedZoomMinAlphaBorder < _normalizedZoomMaxAlphaBorder)
				return (_cam.RelativeZoom - _normalizedZoomMinAlphaBorder) * (1 / shadyArea);
			else
				return 1 - (_cam.RelativeZoom - _normalizedZoomMaxAlphaBorder) * (1 / shadyArea);
			//return _normalizedZoomMinAlphaBorder > _normalizedZoomMaxAlphaBorder ? 1 - result : result;
		}
	}
}