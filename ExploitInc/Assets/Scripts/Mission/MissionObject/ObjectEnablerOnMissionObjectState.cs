using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class ObjectEnablerOnMissionObjectState : MonoBehaviour
	{
		[SerializeField]
		private string _name = "Object";
		public string Name => _name;
		[SerializeField]
		private MissionObjectStateMachine _missionObjectStateMachine = null;
		[SerializeField]
		private GameObject _objectToControll = null;

		[SerializeField]
		private List<MissionObjectState> _enablerStates = new List<MissionObjectState>();
		[SerializeField]
		private List<MissionObjectState> _disablerStates = new List<MissionObjectState>();

		protected virtual void Start()
		{
			_missionObjectStateMachine.OnActiveStatesChanged += onStatesChanged;
			checkStates(_missionObjectStateMachine.ActiveStatesCopy);
		}

		protected virtual void OnDestroy()
		{
			_missionObjectStateMachine.OnActiveStatesChanged -= onStatesChanged;
		}

		private void onStatesChanged(MissionObjectStateMachine.StatesChangedArgs obj)
		{
			checkStates(obj.StateMachine.ActiveStatesCopy);
		}

		private void checkStates(List<MissionObjectState> states)
		{
			bool enablerStatesActive = true;
			foreach (MissionObjectState state in _enablerStates)
				enablerStatesActive = enablerStatesActive && states.Contains(state);

			bool disablerStateActive = false;
			foreach (MissionObjectState state in _disablerStates)
				disablerStateActive = disablerStateActive || states.Contains(state);
			_objectToControll.SetActive(enablerStatesActive && !disablerStateActive);
		}
	}
}