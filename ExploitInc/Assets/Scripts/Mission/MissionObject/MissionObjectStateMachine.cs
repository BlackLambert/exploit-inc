using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class MissionObjectStateMachine : MonoBehaviour
	{
		private Dictionary<object, HashSet<MissionObjectState>> _applicantToRegistedStates = new Dictionary<object, HashSet<MissionObjectState>>();
		
		private List<MissionObjectState> _activeStates = new List<MissionObjectState>();
		public List<MissionObjectState> ActiveStatesCopy => new List<MissionObjectState>(_activeStates);
		public event Action<StatesChangedArgs> OnActiveStatesChanged;

		public void Add(object applicantID, MissionObjectState state)
		{
			if (state == MissionObjectState.Unset || applicantID == null)
				throw new ArgumentException();
			HashSet<MissionObjectState> statesAddedByApplicant;
			if (!_applicantToRegistedStates.TryGetValue(applicantID, out statesAddedByApplicant))
			{
				statesAddedByApplicant = new HashSet<MissionObjectState>();
				_applicantToRegistedStates[applicantID] = statesAddedByApplicant;
			}
			if (statesAddedByApplicant.Contains(state))
				throw new InvalidOperationException();
			statesAddedByApplicant.Add(state);
			checkActiveStates();
		}

		public void Remove(object applicantID, MissionObjectState state)
		{
			if (state == MissionObjectState.Unset || applicantID == null)
				throw new ArgumentException();
			HashSet<MissionObjectState> statesAddedByApplicant;
			if (!_applicantToRegistedStates.TryGetValue(applicantID, out statesAddedByApplicant))
				throw new InvalidOperationException();
			if (!statesAddedByApplicant.Contains(state))
				throw new InvalidOperationException();
			statesAddedByApplicant.Remove(state);
			if (statesAddedByApplicant.Count == 0)
				_applicantToRegistedStates.Remove(applicantID);
			checkActiveStates();
		}

		private void checkActiveStates()
		{
			List<MissionObjectState> registedStates = getRegistedStates();
			List<MissionObjectState> statesToAdd = registedStates.Except(_activeStates).ToList();
			List<MissionObjectState> statesToRemove = _activeStates.Except(registedStates).ToList();

			if (statesToAdd.Count == 0 && statesToRemove.Count == 0)
				return;
			_activeStates.AddRange(statesToAdd);
			foreach(MissionObjectState state in statesToRemove)
				_activeStates.Remove(state);
			OnActiveStatesChanged?.Invoke(new StatesChangedArgs(this, statesToAdd, statesToRemove));
		}

		private List<MissionObjectState> getRegistedStates()
		{
			List<MissionObjectState> result = new List<MissionObjectState>();
			foreach (HashSet<MissionObjectState> states in _applicantToRegistedStates.Values)
			{
				foreach(MissionObjectState state in states)
				{
					if (!result.Contains(state))
						result.Add(state);
				}
			}
			return result;
		}

		public bool Contains(MissionObjectState state)
		{
			return _activeStates.Contains(state);
		}

		public class StatesChangedArgs
		{
			public MissionObjectStateMachine StateMachine { get; }
			public List<MissionObjectState> AddedStates { get; }
			public List<MissionObjectState> RemovedStates { get; }

			public StatesChangedArgs(
				MissionObjectStateMachine stateMachine,
				List<MissionObjectState> addedStates,
				List<MissionObjectState> removedStates)
			{
				StateMachine = stateMachine;
				AddedStates = addedStates;
				RemovedStates = removedStates;

			}
		}
	}
}