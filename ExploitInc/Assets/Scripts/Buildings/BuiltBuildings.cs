using System;
using System.Collections.Generic;
using System.Linq;

namespace SBaier.ExploitInc
{
	public class BuiltBuildings 
	{
		private Dictionary<Guid, Building> _buildings = new Dictionary<Guid, Building>();
		public List<Building> Buildings => _buildings.Values.ToList();
		private Dictionary<ResourceType, List<Building>> _resourceToBuilding = new Dictionary<ResourceType, List<Building>>();
		private Dictionary<WareType, List<Building>> _inputWareToBuilding = new Dictionary<WareType, List<Building>>();
		private Dictionary<WareType, List<Building>> _outputWareToBuilding = new Dictionary<WareType, List<Building>>();

		public event Action OnBuildingChanged;

		public Building Get(Guid iD)
		{
			return _buildings[iD];
		}

		public List<Building> GetInputBuildings(WareType ware)
		{
			if (!_inputWareToBuilding.ContainsKey(ware))
				return new List<Building>();
			return new List<Building>(_inputWareToBuilding[ware]);
		}

		public List<Building> GetOutputBuildings(WareType ware)
		{
			if (!_outputWareToBuilding.ContainsKey(ware))
				return new List<Building>();
			return new List<Building>(_outputWareToBuilding[ware]);
		}

		public void Add(Building building)
		{
			if (_buildings.ContainsKey(building.ID))
				throw new ArgumentException();
			_buildings[building.ID] = building;

			if (building is ResourceExploitBuilding)
				addResourceExploitBuilding(building as ResourceExploitBuilding);
			if (building is WareRefinementBuilding)
				addPrducerBuilding(building as WareRefinementBuilding);
			OnBuildingChanged?.Invoke();
		}

		private void addResourceExploitBuilding(ResourceExploitBuilding building)
		{
			ResourceType resourceType = building.ResourceExploitBuildingConfig.ExploitConfig.ResourceInput.Type;
			WareType outputType = building.ResourceExploitBuildingConfig.ExploitConfig.Output.Type; 
			List<Building> resourceBuildings;
			if (!_resourceToBuilding.TryGetValue(resourceType, out resourceBuildings))
			{
				resourceBuildings = new List<Building>();
				_resourceToBuilding[resourceType] = resourceBuildings;
			}
			resourceBuildings.Add(building);

			List<Building> outputBuildings;
			if (!_outputWareToBuilding.TryGetValue(outputType, out outputBuildings))
			{
				outputBuildings = new List<Building>();
				_outputWareToBuilding[outputType] = outputBuildings;
			}
			outputBuildings.Add(building);
		}

		private void addPrducerBuilding(WareRefinementBuilding building)
		{

			foreach (WaresConfig waresConfig in building.WareRefinementBuildingConfig.Production.InputCopy)
			{
				List<Building> inputBuildings;
				if (!_inputWareToBuilding.TryGetValue(waresConfig.Type, out inputBuildings))
				{
					inputBuildings = new List<Building>();
					_inputWareToBuilding[waresConfig.Type] = inputBuildings;
				}
				inputBuildings.Add(building);
			}

			List<Building> outputBuildings;
			WareType outputType = building.WareRefinementBuildingConfig.Production.Output.Type;
			if (!_outputWareToBuilding.TryGetValue(outputType, out outputBuildings))
			{
				outputBuildings = new List<Building>();
				_outputWareToBuilding[outputType] = outputBuildings;
			}
			outputBuildings.Add(building);
		}

		public void Remove(Building building)
		{
			if (!_buildings.ContainsKey(building.ID))
				throw new ArgumentException();
			_buildings.Remove(building.ID);
			OnBuildingChanged?.Invoke();

		}
	}
}