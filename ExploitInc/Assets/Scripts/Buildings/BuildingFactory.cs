using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class BuildingFactory 
	{
		private PrefabFactory _prefabFactory;
		private DeliveryContainerFactory _deliveryPointFactory;
		private BuiltBuildings _builtBuildings;

		[Inject]
		private void Construct(PrefabFactory prefabFactory,
			DeliveryContainerFactory deliveryPointFactory,
			BuiltBuildings builtBuildings)
		{
			_prefabFactory = prefabFactory;
			_deliveryPointFactory = deliveryPointFactory;
			_builtBuildings = builtBuildings;
		}

		public Building Create(BuildingConfig config, Vector3 position)
		{
			Building result;
			if (config is ResourceExploitBuildingConfig)
				result = createResourceExploitBuilding(config as ResourceExploitBuildingConfig);
			else if (config is WareRefinementBuildingConfig)
				result = createWareRefinementBuilding(config as WareRefinementBuildingConfig);
			else
				throw new NotImplementedException();
			result.Movable.MoveTo(position);
			_builtBuildings.Add(result);
			foreach (DeliveryContainer container in result.InputContainers)
				container.Host = result.BuildingObject;
			foreach (DeliveryContainer container in result.OutputContainers)
				container.Host = result.BuildingObject;
			return result;
		}

		private ResourceExploitBuilding createResourceExploitBuilding(ResourceExploitBuildingConfig config)
		{
			DeliveryContainer input = _deliveryPointFactory.Create(config.ExploitConfig.ResourceInput.ContainerConfig);
			DeliveryContainer output = _deliveryPointFactory.Create(config.ExploitConfig.Output.ContainerConfig);
			Guid iD = Guid.NewGuid();
			ResourceExploitBuildingParameter parameter = new ResourceExploitBuildingParameter(input, output, iD);
			PrefabFactory.Parameter[] factoryParameters = new PrefabFactory.Parameter[]
			{
				new PrefabFactory.Parameter(config),
				new PrefabFactory.Parameter(parameter)
			};
			return _prefabFactory.Create(config.Prefab, factoryParameters).Building;
		}

		private WareRefinementBuilding createWareRefinementBuilding(WareRefinementBuildingConfig config)
		{
			Dictionary<WareType, DeliveryContainer> input = new Dictionary<WareType, DeliveryContainer>();
			foreach (WaresConfig waresConfig in config.Production.InputCopy)
				input.Add(waresConfig.Type, _deliveryPointFactory.Create(waresConfig.ContainerConfig));
			DeliveryContainer output = _deliveryPointFactory.Create(config.Production.Output.ContainerConfig);
			Guid iD = Guid.NewGuid();
			WareRefinementBuildingParameter parameter = new WareRefinementBuildingParameter(input, output, iD);
			PrefabFactory.Parameter[] factoryParameters = new PrefabFactory.Parameter[]
			{
				new PrefabFactory.Parameter(config),
				new PrefabFactory.Parameter(parameter)
			};
			return _prefabFactory.Create(config.Prefab, factoryParameters).Building;
		}
	}
}