using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ResourceExploitBuilding : ProductionBuilding
	{
		public DeliveryContainer ResourceInput { get; private set; }
		public DeliveryContainer WareOutput { get; private set; }
		public ResourceExploitBuildingConfig ResourceExploitBuildingConfig { get; private set; }
		public override BuildingConfig Config => ResourceExploitBuildingConfig;


		[SerializeField]
		private ResourceRadius _resourceRadius = null;
		public ResourceRadius ResourceRadius => _resourceRadius;

		public override List<DeliveryContainer> InputContainers => new List<DeliveryContainer>() { ResourceInput };
		public override List<DeliveryContainer> OutputContainers => new List<DeliveryContainer>() { WareOutput };

		[SerializeField]
		private Transform _building;

		[Inject]
		private void Construct(ResourceExploitBuildingParameter parameter,
			ResourceExploitBuildingConfig config)
		{
			ResourceInput = parameter.ResourceInput;
			WareOutput = parameter.WareOutput;
			ResourceExploitBuildingConfig = config;
		}

		protected virtual void Start()
		{
			_resourceRadius.OnContainerAdded += onContainerAdded;
			_resourceRadius.OnContainerRemoved += onContainerRemoved;
			foreach (ResourceContainer container in _resourceRadius.ContainersCopy)
				addContainer(container);
		}

		protected virtual void OnDestroy()
		{
			_resourceRadius.OnContainerAdded -= onContainerAdded;
			_resourceRadius.OnContainerRemoved -= onContainerRemoved;
		}

		private void onContainerAdded(ResourceContainer container)
		{
			addContainer(container);
		}

		private void onContainerRemoved(ResourceContainer container)
		{
			removeContainer(container);
		}

		private void addContainer(ResourceContainer container)
		{

		}

		private void removeContainer(ResourceContainer container)
		{

		}
	}
}