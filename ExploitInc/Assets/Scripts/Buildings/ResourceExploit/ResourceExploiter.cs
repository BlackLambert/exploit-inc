
using System;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ResourceExploiter : MonoBehaviour
	{
		private DroneCommandsFactory _commandFactory;
		private DeliveryContainer _deliveryContainer = null;

		[SerializeField]
		private DroneHost _host = null;
		[SerializeField]
		private ResourceRadius _resourceRadius = null;
		[SerializeField]
		private ResourceExploitBuilding _building = null;


		[Inject]
		private void Construct(DroneCommandsFactory commandFactory,
			ResourceExploitBuildingParameter parameter)
		{
			_commandFactory = commandFactory;
			_deliveryContainer = parameter.WareOutput;
		}

		protected virtual void Start()
		{
			_host.OnIdlingDroneAdded += onDroneAdded;
			_building.WareOutput.OnStoredChanged += onStoredChanged;
			checkExploit();
		}

		protected virtual void OnDestroy()
		{
			_host.OnIdlingDroneAdded -= onDroneAdded;
			_building.WareOutput.OnStoredChanged -= onStoredChanged;
		}

		private void onDroneAdded(Drone drone)
		{
			checkExploit();
		}

		private void onStoredChanged()
		{
			checkExploit();
		}


		private void checkExploit()
		{
			if (_host.IdlingCount == 0 || _building.WareOutput.Full)
				return;
			ResourceContainer container = _resourceRadius.GetNearestExploitableTo(_host.SpawnPoint).Key;
			if (container == null)
				return;
			exploitWith(_host.Request(), container);
			checkExploit();
		}

		private void exploitWith(Drone drone, ResourceContainer container)
		{
			Command command = _commandFactory.Create(new ExploitResourceDroneCommandParameter(container, _deliveryContainer, _building));
			drone.Commander.AddCommand(command);
		}
	}
}