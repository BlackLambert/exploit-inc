using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class WareRefinementBuilding : ProductionBuilding
	{
		private Dictionary<WareType, DeliveryContainer> _wareInput;
		public Dictionary<WareType, DeliveryContainer> WareInputCopy => _wareInput;
		public DeliveryContainer WareOutput { get; private set; }

		public WareRefinementBuildingConfig WareRefinementBuildingConfig { get; private set; }
		public override BuildingConfig Config => WareRefinementBuildingConfig;

		public override List<DeliveryContainer> InputContainers => WareInputCopy.Values.ToList();

		public override List<DeliveryContainer> OutputContainers => new List<DeliveryContainer>() { WareOutput };

		[SerializeField]
		private Transform _refinementPoint = null;
		public Transform RefinementPoint => _refinementPoint;

		public DeliveryContainer GetInputContainer(WareType type)
		{
			return WareInputCopy.First(i => i.Key == type).Value;
		}

		public int GetMissingInput(WareType type, int expectedAmount)
		{
			DeliveryContainer container = GetInputContainer(type);
			return expectedAmount - container.AvailableCount;
		}

		public int GetNeededInput(WareType type, int expectedAmount)
		{
			DeliveryContainer container = GetInputContainer(type);
			return expectedAmount - container.AvailableCount - container.PromisedCount;
		}

		public Dictionary<WareType, int> GetNeededInput(Dictionary<WareType, int> typeToExpectedAmount)
		{
			Dictionary<WareType, int> result = new Dictionary<WareType, int>();
			foreach (KeyValuePair<WareType, int> pair in typeToExpectedAmount)
				result.Add(pair.Key, GetNeededInput(pair.Key, pair.Value));
			return result;
		}

		public Dictionary<WareType, int> GetMissingInput(Dictionary<WareType, int> typeToExpectedAmount)
		{
			Dictionary<WareType, int> result = new Dictionary<WareType, int>();
			foreach (KeyValuePair<WareType, int> pair in typeToExpectedAmount)
				result.Add(pair.Key, GetMissingInput(pair.Key, pair.Value));
			return result;
		}


		[Inject]
		private void Construct(WareRefinementBuildingParameter parameter,
			WareRefinementBuildingConfig config)
		{
			_wareInput = parameter.WareInput;
			WareOutput = parameter.WareOutput;
			WareRefinementBuildingConfig = config;
		}

		public DeliveryContainer GetInput(WareType wareType)
		{
			return _wareInput[wareType];
		}
	}
}