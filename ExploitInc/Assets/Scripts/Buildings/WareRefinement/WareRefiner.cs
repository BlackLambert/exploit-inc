
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class WareRefiner : MonoBehaviour
	{
		private DroneCommandsFactory _commandFactory;

		[SerializeField]
		private WareRefinementBuilding _building = null;


		[Inject]
		private void Construct(DroneCommandsFactory commandFactory)
		{
			_commandFactory = commandFactory;
		}

		protected virtual void Start()
		{
			_building.DroneHost.OnIdlingDroneAdded += onDroneAdded;
			foreach (DeliveryContainer input in _building.InputContainers)
				input.OnStoredChanged += onStorageChanged;
			foreach (DeliveryContainer output in _building.OutputContainers)
				output.OnStoredChanged += onStorageChanged;
			checkRefinement();
		}

		protected virtual void OnDestroy()
		{
			_building.DroneHost.OnIdlingDroneAdded -= onDroneAdded;
			foreach (DeliveryContainer input in _building.InputContainers)
				input.OnStoredChanged -= onStorageChanged;
			foreach (DeliveryContainer output in _building.OutputContainers)
				output.OnStoredChanged -= onStorageChanged;
		}

		private void onDroneAdded(Drone drone)
		{
			checkRefinement();
		}

		private void onStorageChanged()
		{
			checkRefinement();
		}

		private void checkRefinement()
		{
			Dictionary<WareType, int> typeToExpected = new Dictionary<WareType, int>();
			

			if (_building.DroneHost.IdlingCount <= 0)
				return;

			if (_building.WareOutput.SpaceLeft < _building.WareRefinementBuildingConfig.Production.Output.Amount)
				return;

			foreach (WaresConfig config in _building.WareRefinementBuildingConfig.Production.InputCopy)
				typeToExpected.Add(config.Type, config.Amount);

			if (_building.GetMissingInput(typeToExpected).Sum(p => p.Value) > 0)
				return;

			refine();
		}

		private void refine()
		{
			Drone drone = _building.DroneHost.Request();
			Dictionary<DeliveryContainer, List<Deliverable>> inputWares = new Dictionary<DeliveryContainer, List<Deliverable>>();

			foreach(WaresConfig config in _building.WareRefinementBuildingConfig.Production.InputCopy)
			{
				DeliveryContainer inputContainer = _building.GetInput(config.Type);
				List<Deliverable> deliverables = new List<Deliverable>();

				for (int i = 0; i < config.Amount; i++)
				{
					Deliverable ware = inputContainer.ReserveAny();
					deliverables.Add(ware);
				}

				inputWares.Add(inputContainer, deliverables);
			}

			Command command = _commandFactory.Create(new RefineWareDroneCommandParameter(_building, inputWares));
			drone.Commander.AddCommand(command);
		}
	}
}