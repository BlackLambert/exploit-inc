using System;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class CostsPerTick : MonoBehaviour
	{
		private Ticker _ticker;
		private BuiltBuildings _builtBuildings;
		private MissionData _missionData;

		public double Costs => _builtBuildings.Buildings.Sum(b => b.Config.CreditsPerTick);
		public float NormalizedProgress => _ticker.NormalizedProgress;
		public event Action OnTick;
		public event Action OnCostsChange;

		[Inject]
		private void Construct(Ticker ticker,
			BuiltBuildings builtBuildings,
			MissionData missionData)
		{
			_ticker = ticker;
			_builtBuildings = builtBuildings;
			_missionData = missionData;
		}

		protected virtual void Start()
		{
			_ticker.StopTicking();
			_ticker.OnTick += tick;
			_builtBuildings.OnBuildingChanged += onBuildingsChanged;
			_missionData.OnMissionStateChanged += onStateChanged;
			checkTicking();
		}

		protected virtual void OnDestroy()
		{
			_ticker.OnTick -= tick;
			_builtBuildings.OnBuildingChanged -= onBuildingsChanged;
			_missionData.OnMissionStateChanged -= onStateChanged;
		}

		private void onStateChanged()
		{
			checkTicking();
		}

		private void checkTicking()
		{
			if (_missionData.State == MissionState.OnGoing && Costs > 0 && !_ticker.Ticking)
				_ticker.StartTicking();
			else if(_missionData.State != MissionState.OnGoing && _ticker.Ticking)
				_ticker.StopTicking();
		}

		private void tick()
		{
			OnTick?.Invoke();
		}

		private void onBuildingsChanged()
		{
			OnCostsChange?.Invoke();
			checkTicking();
		}
	}
}