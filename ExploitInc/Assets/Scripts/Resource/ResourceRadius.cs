using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class ResourceRadius : MonoBehaviour
	{
		[SerializeField]
		private ResourceType _type = ResourceType.Unset;

		private List<ResourceContainer> _containers = new List<ResourceContainer>();
		public List<ResourceContainer> ContainersCopy => new List<ResourceContainer>(_containers);
		public event Action<ResourceContainer> OnContainerAdded;
		public event Action<ResourceContainer> OnContainerRemoved;
		public event Action OnContainersChanged;

		public int ContainerAmount => _containers.Count;
		public int ResourceAmount => _containers.Sum(c => c.Amount);
		public List<ResourceContainer> NotEmptyContainers => _containers.Where(c => !c.IsEmpty).ToList();


		protected virtual void OnTriggerEnter(Collider other)
		{
			ResourceCollidable collidable = other.GetComponent<ResourceCollidable>();
			if (collidable == null || _containers.Contains(collidable.Container) || collidable.Container.Type != _type)
				return;
			_containers.Add(collidable.Container);
			OnContainerAdded?.Invoke(collidable.Container);
			OnContainersChanged?.Invoke();
		}

		protected virtual void OnTriggerExit(Collider other)
		{
			ResourceCollidable collidable = other.GetComponent<ResourceCollidable>();
			if (collidable == null || !_containers.Contains(collidable.Container))
				return;
			_containers.Remove(collidable.Container);
			OnContainerRemoved?.Invoke(collidable.Container);
			OnContainersChanged?.Invoke();
		}

		public List<KeyValuePair<ResourceContainer, float>> OrderByDistanceTo(Transform other)
		{
			List<KeyValuePair<ResourceContainer, float>> result = new List<KeyValuePair<ResourceContainer, float>>();
			foreach(ResourceContainer container in _containers)
			{
				float distance = (other.position - container.transform.position).magnitude;
				result.Add(new KeyValuePair<ResourceContainer, float>(container, distance));
			}
			return result.OrderBy(pair => pair.Value).ToList();
		}

		public KeyValuePair<ResourceContainer, float> GetNearestTo(Transform other)
		{
			if (_containers.Count == 0)
				return new KeyValuePair<ResourceContainer, float>(null, 0);
			return OrderByDistanceTo(other).First();
		}

		public KeyValuePair<ResourceContainer, float> GetNearestNotEmptyTo(Transform other)
		{
			KeyValuePair<ResourceContainer, float> result = OrderByDistanceTo(other).FirstOrDefault(pair => !pair.Key.IsEmpty);
			return result;
		}
	}
}