using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class ResourceContainer : MonoBehaviour
	{
		[SerializeField]
		private ResourceType _type = ResourceType.Unset;
		public ResourceType Type => _type;
		[SerializeField]
		private int _maxAmount = 0;
		public int MaxAmount => _maxAmount;

		private int _amount;
		public int Amount => _amount;

		public bool IsEmpty => Amount == 0;
		public Action OnEmpty;
		public Action OnAmountChanged;


		protected virtual void Start()
		{
			_amount = _maxAmount;
		}


		public TakeRessourceResult Take(int requestedAmount)
		{
			if (IsEmpty)
				return new TakeRessourceResult(requestedAmount, 0, Type);
			int taken = Mathf.Clamp(Amount - requestedAmount, 0, requestedAmount);
			_amount -= taken;
			OnAmountChanged?.Invoke();
			if (IsEmpty)
				OnEmpty?.Invoke();
			return new TakeRessourceResult(requestedAmount, taken, Type);
		}

		public void Add(int amountToAdd)
		{
			if (amountToAdd <= 0)
				throw new ArgumentException();
			_amount += amountToAdd;
			OnAmountChanged?.Invoke();
		}


		public class TakeRessourceResult
		{
			public int RequestedAmount { get; }
			public int ReceivedAmount { get; }
			public ResourceType Type { get; }

			public TakeRessourceResult(int requestedAmount,
				int receivedAmount, ResourceType type)
			{
				RequestedAmount = requestedAmount;
				ReceivedAmount = receivedAmount;
				Type = type;
			}
		}
	}
}