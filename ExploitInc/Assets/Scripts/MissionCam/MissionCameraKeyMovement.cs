using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using SBaier.Input;
using Zenject;
using System;

namespace SBaier.ExploitInc
{
	public class MissionCameraKeyMovement : MonoBehaviour
	{
		[SerializeField]
		private Transform _planetCenter = null;
		[SerializeField]
		private Transform _cameraObject = null;

		[SerializeField]
		private List<KeyCode> _upMovementButtons = new List<KeyCode>();
		[SerializeField]
		private List<KeyCode> _downMovementButtons = new List<KeyCode>();
		[SerializeField]
		private List<KeyCode> _rightMovementButtons = new List<KeyCode>();
		[SerializeField]
		private List<KeyCode> _leftMovementButtons = new List<KeyCode>();

		[SerializeField]
		private Movable _movable = null;
		[SerializeField]
		private float _speed = 1f;

		private ButtonInputRegistry _buttonInputRegistry;
		private List<Direction> _directions = new List<Direction>();

		[Inject]
		private void Construct(ButtonInputRegistry buttonInputRegistry)
		{
			_buttonInputRegistry = buttonInputRegistry;
		}

		protected virtual void OnEnable()
		{
			foreach (KeyCode code in _upMovementButtons)
			{
				_buttonInputRegistry.Subscribe(code, ButtonState.Down, startMoveUp);
				_buttonInputRegistry.Subscribe(code, ButtonState.Released, endMoveUp);
			}
			foreach (KeyCode code in _downMovementButtons)
			{
				_buttonInputRegistry.Subscribe(code, ButtonState.Down, startMoveDown);
				_buttonInputRegistry.Subscribe(code, ButtonState.Released, endMoveDown);
			}
			foreach (KeyCode code in _leftMovementButtons)
			{
				_buttonInputRegistry.Subscribe(code, ButtonState.Down, startMoveLeft);
				_buttonInputRegistry.Subscribe(code, ButtonState.Released, endMoveLeft);
			}
			foreach (KeyCode code in _rightMovementButtons)
			{
				_buttonInputRegistry.Subscribe(code, ButtonState.Down, startMoveRight);
				_buttonInputRegistry.Subscribe(code, ButtonState.Released, endMoveRight);
			}
		}

		protected virtual void OnDisable()
		{
			foreach (KeyCode code in _upMovementButtons)
			{
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Down, startMoveUp);
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Released, endMoveUp);
			}
			foreach (KeyCode code in _downMovementButtons)
			{
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Down, startMoveDown);
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Released, endMoveDown);
			}
			foreach (KeyCode code in _leftMovementButtons)
			{
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Down, startMoveLeft);
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Released, endMoveLeft);
			}
			foreach (KeyCode code in _rightMovementButtons)
			{
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Down, startMoveRight);
				_buttonInputRegistry.Unsubscribe(code, ButtonState.Released, endMoveRight);
			}
			_directions.Clear();
		}

		protected virtual void FixedUpdate()
		{
			move();
		}

		private void startMoveUp(ButtonInputEventArgs args)
		{
			addDirection(Direction.Up);
		}
		private void startMoveDown(ButtonInputEventArgs args)
		{
			addDirection(Direction.Down);
		}
		private void startMoveLeft(ButtonInputEventArgs args)
		{
			addDirection(Direction.Left);
		}
		private void startMoveRight(ButtonInputEventArgs args)
		{
			addDirection(Direction.Right);
		}

		private void endMoveUp(ButtonInputEventArgs args)
		{
			removeDirection(Direction.Up);
		}
		private void endMoveDown(ButtonInputEventArgs args)
		{
			removeDirection(Direction.Down);
		}
		private void endMoveLeft(ButtonInputEventArgs args)
		{
			removeDirection(Direction.Left);
		}
		private void endMoveRight(ButtonInputEventArgs args)
		{
			removeDirection(Direction.Right);
		}

		private void addDirection(Direction direction)
		{
			_directions.Add(direction);
		}

		private void removeDirection(Direction direction)
		{
			_directions.Remove(direction);
		}

		private void move()
		{
			Vector3 delta = Vector3.zero;
			if(_directions.Contains(Direction.Up))
				delta += new Vector3(_speed, 0, 0);
			if (_directions.Contains(Direction.Down))
				delta += new Vector3(-_speed, 0, 0);
			if (_directions.Contains(Direction.Right))
				delta += new Vector3(0, 0, -_speed);
			if (_directions.Contains(Direction.Left))
				delta += new Vector3(0, 0, _speed);
			if (delta == Vector3.zero)
				return;

			//_planetCenter.transform.rotation = _planetCenter.transform.rotation * Quaternion.Euler(delta);
			_planetCenter.RotateAround(_planetCenter.position, _planetCenter.right, delta.x);
			_planetCenter.RotateAround(_planetCenter.position, _planetCenter.forward, delta.z);
		}

		private enum Direction
		{
			Up = 0,
			Down = 1,
			Right = 2,
			Left = 3
		}
	}
}