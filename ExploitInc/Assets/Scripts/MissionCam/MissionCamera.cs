using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class MissionCamera : MonoBehaviour
	{
		[SerializeField]
		private GameObject _cameraObject = null;
		[SerializeField]
		private GameObject _cameraTarget = null;
		[SerializeField]
		private float _minZoomDistance = 3f;
		[SerializeField]
		private float _maxZoomDistance = 15f;

		[SerializeField]
		private float _startZoom = 15f;
		[SerializeField]
		private Vector3 _startDistanceVector = new Vector3(0, 1f, 0);

		[SerializeField]
		private Vector3 _targetDisplacementAtMinZoom = new Vector3(30, 0, 0);
		[SerializeField]
		private Vector3 _targetDisplacementAtMaxZoom = new Vector3(0, 0, 0);

		private Vector3 _targetStartLocalPos;


		private Vector3 _distanceVector;


		private float _zoom;
		public float Zoom
		{
			get { return _zoom; }
			set
			{
				_zoom = Mathf.Clamp(value, _minZoomDistance, _maxZoomDistance);
				moveTargetZoomDepenant();
			}
		}

		public float RelativeZoom
		{
			get { return (1 - (Zoom - _minZoomDistance) / (_maxZoomDistance - _minZoomDistance)); }
		}


		protected virtual void Start()
		{
			Zoom = _startZoom;
			_distanceVector = _startDistanceVector.normalized;
			_targetStartLocalPos = _cameraTarget.transform.localPosition;
		}

		protected virtual void Update()
		{
			_cameraObject.transform.localPosition = _distanceVector * Zoom;
			Vector3 lookVector = _cameraTarget.transform.position - _cameraObject.transform.position;
			_cameraObject.transform.rotation = Quaternion.LookRotation(lookVector, _cameraObject.transform.up);
		}

		protected void moveTarget(Vector3 vector)
		{
			_cameraTarget.transform.localPosition = _targetStartLocalPos + vector;
		}

		protected void moveTargetZoomDepenant()
		{
			float x = Mathf.Lerp(_targetDisplacementAtMinZoom.x, _targetDisplacementAtMaxZoom.x, RelativeZoom);
			float y = Mathf.Lerp(_targetDisplacementAtMinZoom.y, _targetDisplacementAtMaxZoom.y, RelativeZoom);
			float z = Mathf.Lerp(_targetDisplacementAtMinZoom.z, _targetDisplacementAtMaxZoom.z, RelativeZoom);
			moveTarget(new Vector3(x, y, z));
		}
	}
}