using System;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class WareSellingPoint : MonoBehaviour
	{
		public DeliveryContainer DeliveryContainer { get; private set; }
		[SerializeField]
		private EndlessDeliveryContainerConfig _containerConfig = null;

		private MissionData _missionData;
		private DeliveryContainerFactory _deliveryContainerFactory;


		[Inject]
		private void Construct(MissionData missionData,
			DeliveryContainerFactory deliveryContainerFactory)
		{
			_missionData = missionData;
			_deliveryContainerFactory = deliveryContainerFactory;
		}


		protected virtual void Start()
		{
			DeliveryContainer = _deliveryContainerFactory.Create(_containerConfig);
			DeliveryContainer.Base.SetParent(transform, false);
			DeliveryContainer.Host = transform;
			DeliveryContainer.OnStoredChanged += onStoredChanged;
		}

		protected virtual void OnDestroy()
		{
			DeliveryContainer.OnStoredChanged -= onStoredChanged;
		}




		private void onStoredChanged()
		{
			foreach(Deliverable deliverable in DeliveryContainer.AvailableDeliverablesCopy)
			{
				if (!(deliverable is Ware))
					throw new ArgumentException();
				DeliveryContainer.Reserve(deliverable);
				DeliveryContainer.Take(deliverable);
				sell(deliverable as Ware);
			}
		}

		private void sell(Ware ware)
		{
			_missionData.AddEarnedMoney(ware.Config.CreditsForSelling);
			Destroy(ware.Base.gameObject);
		}
	}
}