using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ResourceExploitDeliveryPathsCreator : DeliveryPathsCreator
	{
		[SerializeField]
		private ResourceExploitBuilding _resourceExploitBuilding = null;
		private BuiltBuildings _builtBuildings;
		private WareSellingPoint _wareSellingPoint;

		[Inject]
		private void Construct(
			BuiltBuildings builtBuildings,
			WareSellingPoint wareSellingPoint)
		{
			_builtBuildings = builtBuildings;
			_wareSellingPoint = wareSellingPoint;
		}

		
		protected override List<DeliveryContainer> getOutputContainers()
		{
			return new List<DeliveryContainer>() { _resourceExploitBuilding.WareOutput };
		}

		protected override List<DeliveryContainer> getInputContainers()
		{
			return new List<DeliveryContainer>();
		}

		protected override List<DeliveryContainer> getDestinationsForOutput(DeliveryContainer output)
		{
			if (output != _resourceExploitBuilding.WareOutput)
				throw new ArgumentException();
			WareType wareType = _resourceExploitBuilding.ResourceExploitBuildingConfig.ExploitConfig.Output.Type;
			List<Building> wareInputBuildings = _builtBuildings.GetInputBuildings(wareType);
			List<DeliveryContainer> result = new List<DeliveryContainer>();
			foreach (Building building in wareInputBuildings)
			{
				WareRefinementBuilding destinationBuilding = building as WareRefinementBuilding;
				result.Add( destinationBuilding.GetInput(wareType));
			}
			result.Add(_wareSellingPoint.DeliveryContainer);
			return result;
		}

		protected override List<DeliveryContainer> getOriginsForInput(DeliveryContainer input)
		{
			return new List<DeliveryContainer>();
		}
	}
}