using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class DeliveryRoutes
	{
		private Dictionary<DeliveryContainer, List<DeliveryRoute>> _originToRoute = new Dictionary<DeliveryContainer, List<DeliveryRoute>>();
		private Dictionary<DeliveryContainer, List<DeliveryRoute>> _destinationToRoute = new Dictionary<DeliveryContainer, List<DeliveryRoute>>();
		private List<DeliveryRoute> _routes = new List<DeliveryRoute>();
		public List<DeliveryRoute> RoutesCopy => new List<DeliveryRoute>(_routes);

		public event Action<DeliveryRoute> OnRouteAdded;
		public event Action<DeliveryRoute> OnRouteRemoved;

		public void Add(DeliveryRoute route)
		{
			if (_routes.Contains(route))
				throw new ArgumentException();
			_routes.Add(route);
			addTo(_originToRoute, route.Origin, route);
			addTo(_destinationToRoute, route.Destination, route);
			OnRouteAdded?.Invoke(route);
		}

		public void Remove(DeliveryRoute route)
		{
			if (!_routes.Contains(route))
				throw new ArgumentException();
			_routes.Remove(route);
			removeFrom(_originToRoute, route.Origin, route);
			removeFrom(_destinationToRoute, route.Destination, route);
			OnRouteRemoved?.Invoke(route);
		}

		public List<DeliveryRoute> GetByOrigin(DeliveryContainer origin)
		{
			if (!_originToRoute.ContainsKey(origin))
				throw new ArgumentException();
			return _originToRoute[origin];
		}

		public List<DeliveryRoute> GetByDestination(DeliveryContainer destination)
		{
			if (!_destinationToRoute.ContainsKey(destination))
				throw new ArgumentException();
			return _destinationToRoute[destination];
		}

		private void addTo(Dictionary<DeliveryContainer, List<DeliveryRoute>> dictionary, DeliveryContainer container, DeliveryRoute route)
		{
			List<DeliveryRoute> routes;
			if(!dictionary.TryGetValue(container, out routes))
			{
				routes = new List<DeliveryRoute>();
				dictionary[container] = routes;
			}
			if (routes.Contains(route))
				throw new ArgumentException();
			routes.Add(route);
		}

		private void removeFrom(Dictionary<DeliveryContainer, List<DeliveryRoute>> dictionary, DeliveryContainer container, DeliveryRoute route)
		{
			if (!dictionary.ContainsKey(container))
				throw new ArgumentException();
			List<DeliveryRoute> routes = dictionary[container];
			if (!routes.Contains(route))
				throw new ArgumentException();
			routes.Remove(route);
			if (routes.Count == 0)
				dictionary.Remove(container);
		}
	}
}