using System;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class DeliveryContainerFactory
	{

		private PrefabFactory _prefabFactory;

		[Inject]
		private void Construct(PrefabFactory prefabFactory)
		{
			_prefabFactory = prefabFactory;
		}

		public DeliveryContainer Create(DeliveryContainerConfig config, Sprite sprite)
		{
			if (config is LimitedDeliveryContainerConfig)
				return createLimited(config as LimitedDeliveryContainerConfig, sprite);
			if (config is EndlessDeliveryContainerConfig)
				return createEndless(config as EndlessDeliveryContainerConfig, sprite);
			throw new NotImplementedException();
		}

		private LimitedDeliveryContainer createLimited(LimitedDeliveryContainerConfig config, Sprite sprite)
		{
			PrefabFactory.Parameter[] parameters = new PrefabFactory.Parameter[]
			{
				new PrefabFactory.Parameter(config.Capacity),
				new PrefabFactory.Parameter(sprite),
				new PrefabFactory.Parameter(Guid.NewGuid())
			};

			LimitedDeliveryContainer container = _prefabFactory.Create(config.Prefab, parameters);
			container.name = config.name;
			return container;
		}

		private EndlessDeliveryContainer createEndless(EndlessDeliveryContainerConfig config, Sprite sprite)
		{
			PrefabFactory.Parameter[] parameters = new PrefabFactory.Parameter[]
			{
				new PrefabFactory.Parameter(sprite),
				new PrefabFactory.Parameter(Guid.NewGuid())
			};

			EndlessDeliveryContainer container = _prefabFactory.Create(config.Prefab, parameters);
			container.name = config.name;
			return container;
		}
	}
}