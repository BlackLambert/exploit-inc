using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class WareRefinementDeliveryPathsCreator : DeliveryPathsCreator
	{
		[SerializeField]
		private WareRefinementBuilding _building = null;
		private BuiltBuildings _builtBuildings;
		private WareSellingPoint _wareSellingPoint;

		[Inject]
		private void Construct(
			BuiltBuildings builtBuildings,
			WareSellingPoint wareSellingPoint)
		{
			_builtBuildings = builtBuildings;
			_wareSellingPoint = wareSellingPoint;
		}


		protected override List<DeliveryContainer> getOutputContainers()
		{
			return new List<DeliveryContainer>() { _building.WareOutput };
		}

		protected override List<DeliveryContainer> getInputContainers()
		{
			return new List<DeliveryContainer>(_building.WareInputCopy.Values);
		}

		protected override List<DeliveryContainer> getDestinationsForOutput(DeliveryContainer output)
		{
			if (output != _building.WareOutput)
				throw new ArgumentException();
			WareType wareType = _building.WareRefinementBuildingConfig.Production.Output.Type;
			List<Building> wareInputBuildings = _builtBuildings.GetInputBuildings(wareType);
			List<DeliveryContainer> result = new List<DeliveryContainer>();
			foreach (Building building in wareInputBuildings)
			{
				WareRefinementBuilding destinationBuilding = building as WareRefinementBuilding;
				result.Add(destinationBuilding.GetInput(wareType));
			}
			result.Add(_wareSellingPoint.DeliveryContainer);
			return result;
		}

		protected override List<DeliveryContainer> getOriginsForInput(DeliveryContainer input)
		{
			if (!_building.WareInputCopy.ContainsValue(input))
				throw new ArgumentException();
			WareType wareType = _building.WareInputCopy.First(pair => pair.Value == input).Key;
			List<Building> wareOutputBuildings = _builtBuildings.GetOutputBuildings(wareType);
			List<DeliveryContainer> result = new List<DeliveryContainer>();
			foreach (Building building in wareOutputBuildings)
			{
				if(building is WareRefinementBuilding)
				{
					WareRefinementBuilding wareRefinementBuilding = building as WareRefinementBuilding;
					result.Add(wareRefinementBuilding.WareOutput);
				}
				else if(building is ResourceExploitBuilding)
				{
					ResourceExploitBuilding resourceExploitBuilding = building as ResourceExploitBuilding;
					result.Add(resourceExploitBuilding.WareOutput);
				}
			}
			return result;
		}
	}
}