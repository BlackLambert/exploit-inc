using System.Collections;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class DeliveryRoute : MonoBehaviour
	{
		private float _routeOffset = 2f;

		[SerializeField]
		private LineRenderer _lineRenderer = null;
		[SerializeField]
		private int _pointCount = 20;
		[SerializeField]
		private Transform _base = null;
		public Transform Base => _base;
		[SerializeField]
		private RouteShower _shower = null;
		public RouteShower Shower => _shower;
		[SerializeField]
		private DroneHost _drones = null;
		public DroneHost Drones => _drones;

		public DeliveryContainer Origin { get; private set; }
		public DeliveryContainer Destination { get; private set; }
		

		[Inject]
		public void Construct(DeliveryRouteParameter parameter)
		{
			Origin = parameter.Origin;
			Destination = parameter.Destination;
		}

		protected virtual void Start()
		{
			_base.SetParent(Origin.Point, false);
			StartCoroutine(initLine());
		}

		private IEnumerator initLine()
		{
			yield return new WaitForSeconds(0.1f);
			_lineRenderer.positionCount = _pointCount;
			Vector3 originPoint = Origin.Host.position + Origin.Host.position.normalized * _routeOffset;
			Vector3 destinationPoint = Destination.Host.position + Destination.Host.position.normalized * _routeOffset;
			float angle = Vector3.Angle(originPoint, destinationPoint);
			float delta = angle / (_pointCount-1);
			float deltaMag = (destinationPoint.magnitude - originPoint.magnitude)/ (_pointCount - 1);
			for (int i = 0; i < _pointCount; i++)
			{
				Vector3 pos = Vector3.RotateTowards(originPoint, destinationPoint, Mathf.Deg2Rad * delta * i, deltaMag * i);
				_lineRenderer.SetPosition(i, pos);
			}
		}
	}
}