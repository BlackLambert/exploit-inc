using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class DeliveryPathsCreator : MonoBehaviour
	{
		private DeliveryRoutes _routes;
		private DeliveryRouteFactory _deliveryRouteFactory;

		[Inject]
		private void Construct(
			DeliveryRoutes routes,
			DeliveryRouteFactory deliveryRouteFactory)
		{
			_routes = routes;
			_deliveryRouteFactory = deliveryRouteFactory;
		}

		protected virtual void Start()
		{
			create();
		}

		protected virtual void OnDestroy()
		{
			destroy();
		}

		private void create()
		{
			createOutgoingPaths();
			createIngoingPaths();
		}

		private void destroy()
		{
			destroyOutgoingPaths();
			destroyIngoingPaths();
		}

		private void createIngoingPaths()
		{
			List<DeliveryContainer> destinations = getInputContainers();
			foreach (DeliveryContainer destination in destinations)
			{
				List<DeliveryContainer> origins = getOriginsForInput(destination);
				foreach (DeliveryContainer origin in origins)
					_routes.Add(_deliveryRouteFactory.Create(origin, destination));
			}
		}

		private void createOutgoingPaths()
		{
			List<DeliveryContainer> origins = getOutputContainers();
			foreach (DeliveryContainer origin in origins)
			{
				List<DeliveryContainer> destinations = getDestinationsForOutput(origin);
				foreach(DeliveryContainer destination in destinations)
					_routes.Add(_deliveryRouteFactory.Create(origin, destination));
			}
		}

		private void destroyOutgoingPaths()
		{
			List<DeliveryContainer> origins = getOutputContainers();
			List<DeliveryRoute> routesToDelete = new List<DeliveryRoute>();
			foreach (DeliveryContainer origin in origins)
				routesToDelete.AddRange(_routes.GetByOrigin(origin));
			foreach (DeliveryRoute route in routesToDelete)
				_routes.Remove(route);
		}

		private void destroyIngoingPaths()
		{
			List<DeliveryContainer> destinations = getInputContainers();
			List<DeliveryRoute> routesToDelete = new List<DeliveryRoute>();
			foreach (DeliveryContainer destination in destinations)
				routesToDelete.AddRange(_routes.GetByDestination(destination));
			foreach (DeliveryRoute route in routesToDelete)
				_routes.Remove(route);
		}

		protected abstract List<DeliveryContainer> getOutputContainers();

		protected abstract List<DeliveryContainer> getInputContainers();

		protected abstract List<DeliveryContainer> getDestinationsForOutput(DeliveryContainer output);
		protected abstract List<DeliveryContainer> getOriginsForInput(DeliveryContainer input);
	}
}