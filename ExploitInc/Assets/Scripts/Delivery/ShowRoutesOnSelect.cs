
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class ShowRoutesOnSelect : MonoBehaviour
	{
		private DeliveryRoutes _routes;
		[SerializeField]
		private Building _building = null;
		[SerializeField]
		private MissionObjectStateMachine _missionObjectStateMachine = null;

		[Inject]
		private void Construct(DeliveryRoutes routes)
		{
			_routes = routes;
		}

		protected virtual void Start()
		{
			show(_missionObjectStateMachine.Contains(MissionObjectState.Selected));
			_missionObjectStateMachine.OnActiveStatesChanged += onStateChanged;
		}

		protected virtual void OnDestroy()
		{
			_missionObjectStateMachine.OnActiveStatesChanged -= onStateChanged;
		}


		private void onStateChanged(MissionObjectStateMachine.StatesChangedArgs obj)
		{
			if (obj.AddedStates.Contains(MissionObjectState.Selected))
				show(true);
			else if (obj.RemovedStates.Contains(MissionObjectState.Selected))
				show(false);
		}

		private void show(bool active)
		{
			foreach (DeliveryContainer container in _building.InputContainers)
			{
				foreach (DeliveryRoute route in _routes.GetByDestination(container))
					activate(route, active);
			}
			foreach (DeliveryContainer container in _building.OutputContainers)
			{
				foreach (DeliveryRoute route in _routes.GetByOrigin(container))
					activate(route, active);
			}
		}

		private void activate(DeliveryRoute route, bool active)
		{
			route.Shower.Show(active);

		}
	}
}