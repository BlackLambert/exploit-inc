using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class DeliveryService : MonoBehaviour
	{
		private DroneCommandsFactory _commandFactory;
		

		[SerializeField]
		private DroneHost _host = null;
		[SerializeField]
		private DeliveryRoute _route = null;


		[Inject]
		private void Construct(DroneCommandsFactory commandFactory)
		{
			_commandFactory = commandFactory;
		}

		protected virtual void Start()
		{
			_host.OnIdlingDroneAdded += onDroneAdded;
			_route.Origin.OnStoredChanged += onStoredChanged;
			checkDelivery();
		}

		protected virtual void OnDestroy()
		{
			_host.OnIdlingDroneAdded -= onDroneAdded;
			_route.Origin.OnStoredChanged -= onStoredChanged;
		}

		private void onDroneAdded(Drone drone)
		{
			checkDelivery();
		}

		private void onStoredChanged()
		{
			checkDelivery();
		}

		private void checkDelivery()
		{
			if (_route.Origin.AvailableCount <= 0 || _host.IdlingCount <= 0)
				return;
			Deliverable deliverable = _route.Origin.ReserveAny();
			Drone drone = _host.Request();
			Command command = _commandFactory.Create(new TransportWareCommandParameter(_route, deliverable));
			drone.Commander.AddCommand(command);
		}
	}
}