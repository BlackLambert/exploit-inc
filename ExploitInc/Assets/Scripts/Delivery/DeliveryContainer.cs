using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class DeliveryContainer : MonoBehaviour
	{
		[SerializeField]
		private Transform _base = null;
		public Transform Base => _base;
		
		[SerializeField]
		private Transform _point = null;
		public Transform Point => _point;

		private List<Deliverable> _storedDeliverables = new List<Deliverable>();
		private List<Deliverable> _reservedDeliverables = new List<Deliverable>();
		private List<Deliverable> _promisedDeliverables = new List<Deliverable>();

		public List<Deliverable> AvailableDeliverablesCopy => new List<Deliverable>(_storedDeliverables);

		public int Count => _storedDeliverables.Count + _reservedDeliverables.Count + _promisedDeliverables.Count;
		public bool Empty => Count == 0;

		public event Action OnStoredChanged;


		public void Reserve(Deliverable deliverable)
		{
			if (_storedDeliverables.Count == 0 || !_storedDeliverables.Contains(deliverable))
				throw new InvalidOperationException();
			_storedDeliverables.Remove(deliverable);
			_reservedDeliverables.Add(deliverable);
		}

		public Deliverable ReserveAny()
		{
			if (_storedDeliverables.Count == 0)
				throw new InvalidOperationException();
			Deliverable last = _storedDeliverables[_storedDeliverables.Count - 1];
			Reserve(last);
			return last;
		}

		public void CancelReservationOf(Deliverable deliverable)
		{
			if (_reservedDeliverables.Count == 0 || !_reservedDeliverables.Contains(deliverable))
				throw new InvalidOperationException();
			_storedDeliverables.Add(deliverable);
			_reservedDeliverables.Remove(deliverable);
		}

		public void Promise(Deliverable deliverable)
		{
			if (promisePossible())
				throw new InvalidOperationException();
			_promisedDeliverables.Add(deliverable);
		}

		public void CancelPromiseOf(Deliverable deliverable)
		{
			if (_promisedDeliverables.Count == 0 || !_promisedDeliverables.Contains(deliverable))
				throw new InvalidOperationException();
			_promisedDeliverables.Remove(deliverable);
		}

		public void Store(Deliverable deliverable)
		{
			if (_promisedDeliverables.Count == 0 || !_promisedDeliverables.Contains(deliverable))
				throw new InvalidOperationException("This deliverable has not been promised before. Please promise before storing");
			_promisedDeliverables.Remove(deliverable);
			_storedDeliverables.Add(deliverable);
			OnStoredChanged?.Invoke();
		}

		public void Take(Deliverable deliverable)
		{
			if (_reservedDeliverables.Count == 0 || !_reservedDeliverables.Contains(deliverable))
				throw new InvalidOperationException("This deliverable has not been reserved before. Please reserve before storing");
			_reservedDeliverables.Remove(deliverable);
			OnStoredChanged?.Invoke();
		}

		protected abstract bool promisePossible();
	}
}