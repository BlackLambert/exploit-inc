using System;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class EarnCreditsInTimeTask : FailableTask
	{
		private TimeFormater _formater;

		public double CreditsToEarn { get; private set; }
		public float TaskTime { get; private set; }

		public override event Action OnProgressChanged;
		public override event Action OnFailedProgressChanged;

		private double _earnedCredits = 0;
		public double EarnedCredits
		{
			get => _earnedCredits;
			set
			{
				_earnedCredits = value;
				OnProgressChanged?.Invoke();
				if (Progress == 1)
					IsFullfilled = true;
			}
		}

		public override float Progress => Mathf.Clamp01((float)(EarnedCredits / CreditsToEarn));
		public override float FailedProgress => Mathf.Clamp01((float)(CurrentMissionTime / TaskTime));
		public override string ProgressText => $"{EarnedCredits} / {CreditsToEarn} c";
		public override string FailedProgressText => _formater.FromSeconds(TaskTime - CurrentMissionTime);

		private float _currentMissionTime = 0;
		public float CurrentMissionTime
		{
			get => _currentMissionTime;
			set
			{
				_currentMissionTime = value;
				OnFailedProgressChanged?.Invoke();
				if (FailedProgress == 1)
					HasFailed = true;
			}
		}

		

		public EarnCreditsInTimeTask(EarnCreditsWithinTimeTaskConfig config, TimeFormater timeFormater) 
		{
			CreditsToEarn = config.CreditsToEarn;
			TaskTime = config.TimeInSeconds;
			_formater = timeFormater;
		}
	}
}