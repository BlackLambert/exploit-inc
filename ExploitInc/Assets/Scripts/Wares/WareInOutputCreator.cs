using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class WareInOutputCreator : MonoBehaviour
	{
		[SerializeField]
		private Transform _hook = null;
		[SerializeField]
		private WareInOutput _prefab = null;
		[SerializeField]
		private float _startRotation = -30;
		[SerializeField]
		private float _delta = -30;

		
		protected abstract int Count { get; }

		private List<WareInOutput> _displays = new List<WareInOutput>();

		private PrefabFactory _prefabFactory;

		[Inject]
		private void Construct(PrefabFactory prefabFactory)
		{
			_prefabFactory = prefabFactory;
		}

		protected virtual void Start()
		{
			create();
		}

		private void create()
		{
			for(int i = 0; i < Count; i++)
			{
				WareInOutput result = _prefabFactory.Create(_prefab);
				result.WareSprite = getSprite(i);
				result.Base.SetParent(_hook, false);
				result.Base.localRotation = Quaternion.Euler(0, 0, (_startRotation + _displays.Count * _delta));
				_displays.Add(result);
			}
		}

		protected abstract Sprite getSprite(int index);
	}
}