using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SBaier.ExploitInc
{
	public class DeliverableStackOrganizer : MonoBehaviour
	{

		[SerializeField]
		private List<Transform> _hooks = new List<Transform>();
		[SerializeField]
		private DeliveryContainer _deliveryContainer = null;

		private Dictionary<Transform, Deliverable> _hookedDeliverables = new Dictionary<Transform, Deliverable>();

		protected virtual void Start()
		{
			_deliveryContainer.OnDelivarableAdded += onAdded;
			_deliveryContainer.OnDeliverableRemoved += onRemoved;
			init();
		}

		protected virtual void OnDestroy()
		{
			_deliveryContainer.OnDelivarableAdded -= onAdded;
			_deliveryContainer.OnDeliverableRemoved -= onRemoved;
		}

		private void onAdded(Deliverable obj)
		{
			add(obj);
		}

		private void onRemoved(Deliverable obj)
		{
			remove(obj);
		}

		private void init()
		{
			foreach (Transform hook in _hooks)
				_hookedDeliverables.Add(hook, null);
			foreach (Deliverable deliverable in _deliveryContainer.StoredDeliverablesCopy)
				add(deliverable);
		}

		private void add(Deliverable deliverable)
		{
			Transform hook = _hookedDeliverables.First(p => p.Value == null).Key;
			_hookedDeliverables[hook] = deliverable;
			deliverable.Base.SetParent(hook, false);
		}

		private void remove(Deliverable deliverable)
		{
			Transform hook = _hookedDeliverables.First(p => p.Value == deliverable).Key;
			_hookedDeliverables[hook] = null;
		}
	}
}