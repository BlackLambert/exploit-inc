using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public class TreesCreator : MonoBehaviour
	{
		[SerializeField]
		private List<TreeCreationConfig> _treeConfigs = new List<TreeCreationConfig>();
		private ICollection<TreeSlot> _slots = null;

		private PrefabFactory _prefabFactory;


		[Inject]
		private void Construct(PrefabFactory prefabFactory)
		{
			_prefabFactory = prefabFactory;
		}

		protected virtual void Start()
		{
			_slots = FindObjectsOfType<TreeSlot>();
			createTrees();
		}

		private void createTrees()
		{
			int chanceSum = _treeConfigs.Sum(config => config.Chance);
			foreach (TreeSlot slot in _slots)
			{
				int roll = Random.Range(0, chanceSum);
				int currentSum = 0;
				foreach (TreeCreationConfig config in _treeConfigs)
				{
					currentSum += config.Chance;
					if(currentSum >= roll)
					{
						createTree(slot, config);
						break;
					}
				}
			}
		}

		private void createTree(TreeSlot slot, TreeCreationConfig config)
		{
			if (config.Prefab == null)
				return;

			Tree instance = _prefabFactory.Create(config.Prefab);
			slot.Add(instance);
		}
	}
}