using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Zenject;

namespace SBaier.ExploitInc
{
	public abstract class ObjectsRandomCreator<TObject> : MonoBehaviour where TObject : Component
	{
		[SerializeField]
		private List<ObjectRandomCreationConfig> _objectConfigs = new List<ObjectRandomCreationConfig>();
		private ICollection<ObjectRandomSlot<TObject>> _slots = null;

		private PrefabFactory _prefabFactory;


		[Inject]
		private void Construct(PrefabFactory prefabFactory)
		{
			_prefabFactory = prefabFactory;
		}

		protected virtual void Start()
		{
			_slots = FindObjectsOfType<ObjectRandomSlot<TObject>>();
			createObjects();
		}

		private void createObjects()
		{
			int chanceSum = _objectConfigs.Sum(config => config.Chance);
			foreach (ObjectRandomSlot<TObject> slot in _slots)
			{
				int roll = Random.Range(0, chanceSum);
				int currentSum = 0;
				foreach (ObjectRandomCreationConfig config in _objectConfigs)
				{
					currentSum += config.Chance;
					if(currentSum >= roll)
					{
						createTree(slot, config);
						break;
					}
				}
			}
		}

		private void createTree(ObjectRandomSlot<TObject> slot, ObjectRandomCreationConfig config)
		{
			if (config.Prefab == null)
				return;

			GameObject instance = _prefabFactory.Create(config.Prefab, getParameters());
			TObject component = instance.GetComponent<TObject>();
			slot.Add(component);
		}

		protected abstract PrefabFactory.Parameter[] getParameters();
		
	}
}